#![feature ( libc )]
#![feature ( i128_type )]
#![feature ( const_ptr_null )]
#![feature ( offset_to )]
#![feature ( const_ptr_null_mut )]
#![feature ( extern_types )]
#![feature ( asm )]
#![allow ( non_upper_case_globals )]
#![allow ( non_camel_case_types )]
#![allow ( non_snake_case )]
#![allow ( dead_code )]
#![allow ( mutable_transmutes )]
#![allow ( unused_mut )]
extern crate libc;
extern "C" {
    pub type format_tree;
    pub type tmuxpeer;
    pub type tmuxproc;
    pub type input_ctx;
    pub type screen_write_collect_line;
    pub type screen_write_collect_item;
    pub type evbuffer;
    pub type paste_buffer;
    pub type screen_titles;
    pub type hooks;
    pub type environ;
    pub type tty_code;
    pub type options;
    pub type bufferevent_ops;
    pub type args_entry;
    pub type _IO_FILE_plus;
    pub type format_job_tree;
    pub type event_base;
    #[no_mangle]
    fn __errno_location() -> *mut libc::c_int;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void) -> ();
    #[no_mangle]
    fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
     -> *mut libc::c_void;
    #[no_mangle]
    fn memmove(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
     -> *mut libc::c_void;
    #[no_mangle]
    fn memset(_: *mut libc::c_void, _: libc::c_int, _: libc::c_ulong)
     -> *mut libc::c_void;
    #[no_mangle]
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    #[no_mangle]
    fn strncmp(_: *const libc::c_char, _: *const libc::c_char,
               _: libc::c_ulong) -> libc::c_int;
    #[no_mangle]
    fn strchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    #[no_mangle]
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    #[no_mangle]
    fn strerror(_: libc::c_int) -> *mut libc::c_char;
    #[no_mangle]
    fn time(__timer: *mut time_t) -> time_t;
    #[no_mangle]
    static mut __tzname: [*mut libc::c_char; 2];
    #[no_mangle]
    static mut __daylight: libc::c_int;
    #[no_mangle]
    static mut __timezone: libc::c_long;
    #[no_mangle]
    static mut tzname: [*mut libc::c_char; 2];
    #[no_mangle]
    static mut daylight: libc::c_int;
    #[no_mangle]
    static mut timezone: libc::c_long;
    #[no_mangle]
    static mut __environ: *mut *mut libc::c_char;
    #[no_mangle]
    static mut optarg: *mut libc::c_char;
    #[no_mangle]
    static mut optind: libc::c_int;
    #[no_mangle]
    static mut opterr: libc::c_int;
    #[no_mangle]
    static mut optopt: libc::c_int;
    #[no_mangle]
    static in6addr_any: in6_addr;
    #[no_mangle]
    static in6addr_loopback: in6_addr;
    #[no_mangle]
    static mut _IO_2_1_stdin_: _IO_FILE_plus;
    #[no_mangle]
    static mut _IO_2_1_stdout_: _IO_FILE_plus;
    #[no_mangle]
    static mut _IO_2_1_stderr_: _IO_FILE_plus;
    #[no_mangle]
    static mut stdin: *mut _IO_FILE;
    #[no_mangle]
    static mut stdout: *mut _IO_FILE;
    #[no_mangle]
    static mut stderr: *mut _IO_FILE;
    #[no_mangle]
    fn fclose(__stream: *mut FILE) -> libc::c_int;
    #[no_mangle]
    fn fopen(__filename: *const libc::c_char, __modes: *const libc::c_char)
     -> *mut FILE;
    #[no_mangle]
    fn fputc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
    #[no_mangle]
    fn fputs(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;
    #[no_mangle]
    static mut sys_nerr: libc::c_int;
    #[no_mangle]
    static sys_errlist: [*const libc::c_char; 0];
    #[no_mangle]
    fn event_add(ev: *mut event, timeout: *const timeval) -> libc::c_int;
    #[no_mangle]
    fn event_del(_: *mut event) -> libc::c_int;
    #[no_mangle]
    fn event_initialized(ev: *const event) -> libc::c_int;
    #[no_mangle]
    fn event_set(_: *mut event, _: libc::c_int, _: libc::c_short,
                 _:
                     Option<unsafe extern "C" fn(_: libc::c_int,
                                                 _: libc::c_short,
                                                 _: *mut libc::c_void) -> ()>,
                 _: *mut libc::c_void) -> ();
    #[no_mangle]
    fn fgetln(_: *mut FILE, _: *mut size_t) -> *mut libc::c_char;
    #[no_mangle]
    static mut BSDopterr: libc::c_int;
    #[no_mangle]
    static mut BSDoptind: libc::c_int;
    #[no_mangle]
    static mut BSDoptopt: libc::c_int;
    #[no_mangle]
    static mut BSDoptreset: libc::c_int;
    #[no_mangle]
    static mut BSDoptarg: *mut libc::c_char;
    #[no_mangle]
    fn xmalloc(_: size_t) -> *mut libc::c_void;
    #[no_mangle]
    fn xreallocarray(_: *mut libc::c_void, _: size_t, _: size_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn xstrdup(_: *const libc::c_char) -> *mut libc::c_char;
    #[no_mangle]
    fn xasprintf(_: *mut *mut libc::c_char, _: *const libc::c_char, ...)
     -> libc::c_int;
    #[no_mangle]
    static mut environ: *mut *mut libc::c_char;
    #[no_mangle]
    static mut global_hooks: *mut hooks;
    #[no_mangle]
    static mut global_options: *mut options;
    #[no_mangle]
    static mut global_s_options: *mut options;
    #[no_mangle]
    static mut global_w_options: *mut options;
    #[no_mangle]
    static mut global_environ: *mut environ;
    #[no_mangle]
    static mut start_time: timeval;
    #[no_mangle]
    static mut socket_path: *const libc::c_char;
    #[no_mangle]
    static mut shell_command: *const libc::c_char;
    #[no_mangle]
    static mut ptm_fd: libc::c_int;
    #[no_mangle]
    fn find_home() -> *const libc::c_char;
    #[no_mangle]
    static mut cfg_finished: libc::c_int;
    #[no_mangle]
    fn paste_buffer_data(_: *mut paste_buffer, _: *mut size_t)
     -> *const libc::c_char;
    #[no_mangle]
    fn paste_get_top(_: *mut *const libc::c_char) -> *mut paste_buffer;
    #[no_mangle]
    fn format_create(_: *mut client, _: *mut cmdq_item, _: libc::c_int,
                     _: libc::c_int) -> *mut format_tree;
    #[no_mangle]
    fn format_free(_: *mut format_tree) -> ();
    #[no_mangle]
    fn format_expand_time(_: *mut format_tree, _: *const libc::c_char,
                          _: time_t) -> *mut libc::c_char;
    #[no_mangle]
    fn format_defaults(_: *mut format_tree, _: *mut client, _: *mut session,
                       _: *mut winlink, _: *mut window_pane) -> ();
    #[no_mangle]
    fn options_get_string(_: *mut options, _: *const libc::c_char)
     -> *const libc::c_char;
    #[no_mangle]
    fn options_get_number(_: *mut options, _: *const libc::c_char)
     -> libc::c_longlong;
    #[no_mangle]
    static options_table: [options_table_entry; 0];
    #[no_mangle]
    static mut all_jobs: joblist;
    #[no_mangle]
    static mut tty_terms: tty_terms;
    #[no_mangle]
    static mut cmd_table: [*const cmd_entry; 0];
    #[no_mangle]
    static mut key_tables: key_tables;
    #[no_mangle]
    static mut server_proc: *mut tmuxproc;
    #[no_mangle]
    static mut clients: clients;
    #[no_mangle]
    static mut marked_pane: cmd_find_state;
    #[no_mangle]
    fn log_debug(_: *const libc::c_char, ...) -> ();
    #[no_mangle]
    fn screen_write_cstrlen(_: *const libc::c_char, ...) -> size_t;
    #[no_mangle]
    fn winlinks_RB_NEXT(_: *mut winlink) -> *mut winlink;
    #[no_mangle]
    fn winlinks_RB_MINMAX(_: *mut winlinks, _: libc::c_int) -> *mut winlink;
    #[no_mangle]
    fn screen_free(_: *mut screen) -> ();
    #[no_mangle]
    fn grid_compare(_: *mut grid, _: *mut grid) -> libc::c_int;
    #[no_mangle]
    fn screen_write_stop(_: *mut screen_write_ctx) -> ();
    #[no_mangle]
    fn screen_write_fast_copy(_: *mut screen_write_ctx, _: *mut screen,
                              _: u_int, _: u_int, _: u_int, _: u_int) -> ();
    #[no_mangle]
    fn screen_write_cursormove(_: *mut screen_write_ctx, _: u_int, _: u_int)
     -> ();
    #[no_mangle]
    fn screen_write_cnputs(_: *mut screen_write_ctx, _: ssize_t,
                           _: *const grid_cell, _: *const libc::c_char, ...)
     -> ();
    #[no_mangle]
    fn screen_write_putc(_: *mut screen_write_ctx, _: *const grid_cell,
                         _: u_char) -> ();
    #[no_mangle]
    fn screen_write_start(_: *mut screen_write_ctx, _: *mut window_pane,
                          _: *mut screen) -> ();
    #[no_mangle]
    fn screen_init(_: *mut screen, _: u_int, _: u_int, _: u_int) -> ();
    #[no_mangle]
    fn style_apply_update(_: *mut grid_cell, _: *mut options,
                          _: *const libc::c_char) -> ();
    #[no_mangle]
    fn style_apply(_: *mut grid_cell, _: *mut options, _: *const libc::c_char)
     -> ();
    #[no_mangle]
    fn screen_reinit(_: *mut screen) -> ();
    #[no_mangle]
    fn screen_write_nputs(_: *mut screen_write_ctx, _: ssize_t,
                          _: *const grid_cell, _: *const libc::c_char, ...)
     -> ();
    #[no_mangle]
    fn screen_write_strlen(_: *const libc::c_char, ...) -> size_t;
    #[no_mangle]
    fn utf8_strlen(_: *const utf8_data) -> size_t;
    #[no_mangle]
    fn utf8_fromcstr(_: *const libc::c_char) -> *mut utf8_data;
    #[no_mangle]
    fn screen_write_cell(_: *mut screen_write_ctx, _: *const grid_cell) -> ();
    #[no_mangle]
    fn utf8_copy(_: *mut utf8_data, _: *const utf8_data) -> ();
    #[no_mangle]
    fn utf8_strwidth(_: *const utf8_data, _: ssize_t) -> u_int;
    #[no_mangle]
    fn utf8_tocstr(_: *mut utf8_data) -> *mut libc::c_char;
    #[no_mangle]
    fn utf8_split(_: wchar_t, _: *mut utf8_data) -> utf8_state;
    #[no_mangle]
    fn utf8_set(_: *mut utf8_data, _: u_char) -> ();
    #[no_mangle]
    fn sessions_RB_NEXT(_: *mut session) -> *mut session;
    #[no_mangle]
    static mut sessions: sessions;
    #[no_mangle]
    fn sessions_RB_MINMAX(_: *mut sessions, _: libc::c_int) -> *mut session;
    #[no_mangle]
    fn session_find(_: *const libc::c_char) -> *mut session;
    #[no_mangle]
    static grid_default_cell: grid_cell;
    #[no_mangle]
    static mut windows: windows;
    #[no_mangle]
    static mut all_window_panes: window_pane_tree;
    #[no_mangle]
    static window_buffer_mode: window_mode;
    #[no_mangle]
    static window_tree_mode: window_mode;
    #[no_mangle]
    static window_clock_mode: window_mode;
    #[no_mangle]
    static window_clock_table: [[[libc::c_char; 5]; 5]; 14];
    #[no_mangle]
    static window_client_mode: window_mode;
    #[no_mangle]
    static window_copy_mode: window_mode;
    #[no_mangle]
    static mut session_groups: session_groups;
}
pub const CMD_FIND_PANE: cmd_find_type = 0;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct client {
    pub name: *const libc::c_char,
    pub peer: *mut tmuxpeer,
    pub queue: cmdq_list,
    pub pid: pid_t,
    pub fd: libc::c_int,
    pub event: event,
    pub retval: libc::c_int,
    pub creation_time: timeval,
    pub activity_time: timeval,
    pub environ: *mut environ,
    pub jobs: *mut format_job_tree,
    pub title: *mut libc::c_char,
    pub cwd: *const libc::c_char,
    pub term: *mut libc::c_char,
    pub ttyname: *mut libc::c_char,
    pub tty: tty,
    pub written: size_t,
    pub discarded: size_t,
    pub redraw: size_t,
    pub stdin_callback: Option<unsafe extern "C" fn(_: *mut client,
                                                    _: libc::c_int,
                                                    _: *mut libc::c_void)
                                   -> ()>,
    pub stdin_callback_data: *mut libc::c_void,
    pub stdin_data: *mut evbuffer,
    pub stdin_closed: libc::c_int,
    pub stdout_data: *mut evbuffer,
    pub stderr_data: *mut evbuffer,
    pub repeat_timer: event,
    pub click_timer: event,
    pub click_button: u_int,
    pub status: status_line,
    pub flags: libc::c_int,
    pub keytable: *mut key_table,
    pub identify_timer: event,
    pub identify_callback: Option<unsafe extern "C" fn(_: *mut client,
                                                       _: *mut window_pane)
                                      -> ()>,
    pub identify_callback_data: *mut libc::c_void,
    pub message_string: *mut libc::c_char,
    pub message_timer: event,
    pub message_next: u_int,
    pub message_log: unnamed_24,
    pub prompt_string: *mut libc::c_char,
    pub prompt_buffer: *mut utf8_data,
    pub prompt_index: size_t,
    pub prompt_inputcb: prompt_input_cb,
    pub prompt_freecb: prompt_free_cb,
    pub prompt_data: *mut libc::c_void,
    pub prompt_hindex: u_int,
    pub prompt_mode: unnamed_7,
    pub prompt_flags: libc::c_int,
    pub session: *mut session,
    pub last_session: *mut session,
    pub wlmouse: libc::c_int,
    pub references: libc::c_int,
    pub entry: unnamed_30,
}
pub const KEYC_F11: unnamed_25 = 268435536;
pub const KEYC_MOUSEUP3_BORDER: unnamed_25 = 268435482;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct cmd_list {
    pub references: libc::c_int,
    pub list: unnamed_28,
}
pub const KEYC_MOUSEDRAG1_STATUS: unnamed_25 = 268435484;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed {
    pub tqe_next: *mut event,
    pub tqe_prev: *mut *mut event,
}
pub const OPTIONS_TABLE_STYLE: options_table_type = 7;
pub const KEYC_BTAB: unnamed_25 = 268435544;
pub const CMDQ_CALLBACK: cmdq_type = 1;
pub const KEYC_KP_ONE: unnamed_25 = 268435559;
pub const KEYC_KP_ZERO: unnamed_25 = 268435563;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct sessions {
    pub rbh_root: *mut session,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_0 {
    pub tqe_next: *mut event,
    pub tqe_prev: *mut *mut event,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_1 {
    pub tqe_next: *mut winlink,
    pub tqe_prev: *mut *mut winlink,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct cmdq_list {
    pub tqh_first: *mut cmdq_item,
    pub tqh_last: *mut *mut cmdq_item,
}
pub const KEYC_UP: unnamed_25 = 268435545;
pub type pid_t = __pid_t;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct utf8_data {
    pub data: [u_char; 9],
    pub have: u_char,
    pub size: u_char,
    pub width: u_char,
}
pub const KEYC_MOUSEUP2_STATUS: unnamed_25 = 268435478;
pub const PROMPT_ENTRY: unnamed_7 = 0;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct cmd_entry_flag {
    pub flag: libc::c_char,
    pub type_0: cmd_find_type,
    pub flags: libc::c_int,
}
pub type bitstr_t = libc::c_uchar;
pub const OPTIONS_TABLE_FLAG: options_table_type = 5;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct event_watermark {
    pub low: size_t,
    pub high: size_t,
}
pub type __suseconds_t = libc::c_long;
pub const TTY_VT101: unnamed_16 = 1;
pub const KEYC_DOUBLECLICK3_PANE: unnamed_25 = 268435513;
pub const OPTIONS_TABLE_SESSION: options_table_scope = 2;
pub type ssize_t = __ssize_t;
pub const KEYC_WHEELDOWN_STATUS: unnamed_25 = 268435505;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_2 {
    pub rbe_left: *mut winlink,
    pub rbe_right: *mut winlink,
    pub rbe_parent: *mut winlink,
    pub rbe_color: libc::c_int,
}
pub const KEYC_F7: unnamed_25 = 268435532;
pub const OPTIONS_TABLE_ATTRIBUTES: options_table_type = 4;
pub const KEYC_TRIPLECLICK2_STATUS: unnamed_25 = 268435520;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct screen_write_ctx {
    pub wp: *mut window_pane,
    pub s: *mut screen,
    pub item: *mut screen_write_collect_item,
    pub list: *mut screen_write_collect_line,
    pub scrolled: u_int,
    pub bg: u_int,
    pub cells: u_int,
    pub written: u_int,
    pub skipped: u_int,
}
pub type u_int = __u_int;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_3 {
    pub rbe_left: *mut window,
    pub rbe_right: *mut window,
    pub rbe_parent: *mut window,
    pub rbe_color: libc::c_int,
}
pub const OPTIONS_TABLE_NUMBER: options_table_type = 1;
pub const KEYC_MOUSEDRAGEND3_BORDER: unnamed_25 = 268435500;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct tty_term {
    pub name: *mut libc::c_char,
    pub references: u_int,
    pub acs: [[libc::c_char; 2]; 256],
    pub codes: *mut tty_code,
    pub flags: libc::c_int,
    pub entry: unnamed_4,
}
pub const UTF8_DONE: utf8_state = 1;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct joblist {
    pub lh_first: *mut job,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct grid_line {
    pub cellused: u_int,
    pub cellsize: u_int,
    pub celldata: *mut grid_cell_entry,
    pub extdsize: u_int,
    pub extddata: *mut grid_cell,
    pub flags: libc::c_int,
}
pub const KEYC_WHEELUP_STATUS: unnamed_25 = 268435502;
pub const CMD_RETURN_NORMAL: cmd_retval = 0;
pub const TTY_UNKNOWN: unnamed_16 = 6;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_4 {
    pub le_next: *mut tty_term,
    pub le_prev: *mut *mut tty_term,
}
pub const KEYC_TRIPLECLICK1_STATUS: unnamed_25 = 268435517;
pub const KEYC_F10: unnamed_25 = 268435535;
pub const KEYC_MOUSEDRAG3_BORDER: unnamed_25 = 268435491;
pub const KEYC_DOUBLECLICK1_BORDER: unnamed_25 = 268435509;
pub type cmdq_type = libc::c_uint;
pub type unnamed_5 = libc::c_uint;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct key_table {
    pub name: *const libc::c_char,
    pub key_bindings: key_bindings,
    pub references: u_int,
    pub entry: unnamed_8,
}
pub const OPTIONS_TABLE_KEY: options_table_type = 2;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct clients {
    pub tqh_first: *mut client,
    pub tqh_last: *mut *mut client,
}
pub type bufferevent_data_cb =
    Option<unsafe extern "C" fn(_: *mut bufferevent, _: *mut libc::c_void)
               -> ()>;
pub const KEYC_FOCUS_OUT: unnamed_25 = 268435457;
pub const LAYOUT_LEFTRIGHT: layout_type = 0;
pub const KEYC_MOUSEDRAG1_BORDER: unnamed_25 = 268435485;
pub type uint32_t = libc::c_uint;
pub const KEYC_KP_ENTER: unnamed_25 = 268435562;
pub const CMD_FIND_WINDOW: cmd_find_type = 1;
pub const KEYC_MOUSEDOWN3_STATUS: unnamed_25 = 268435472;
pub const CMD_RETURN_ERROR: cmd_retval = -1;
pub const KEYC_TRIPLECLICK3_STATUS: unnamed_25 = 268435523;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct args {
    pub tree: args_tree,
    pub argc: libc::c_int,
    pub argv: *mut *mut libc::c_char,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct window_pane {
    pub id: u_int,
    pub active_point: u_int,
    pub window: *mut window,
    pub layout_cell: *mut layout_cell,
    pub saved_layout_cell: *mut layout_cell,
    pub sx: u_int,
    pub sy: u_int,
    pub osx: u_int,
    pub osy: u_int,
    pub xoff: u_int,
    pub yoff: u_int,
    pub flags: libc::c_int,
    pub argc: libc::c_int,
    pub argv: *mut *mut libc::c_char,
    pub shell: *mut libc::c_char,
    pub cwd: *const libc::c_char,
    pub pid: pid_t,
    pub tty: [libc::c_char; 32],
    pub status: libc::c_int,
    pub fd: libc::c_int,
    pub event: *mut bufferevent,
    pub resize_timer: event,
    pub ictx: *mut input_ctx,
    pub colgc: grid_cell,
    pub palette: *mut libc::c_int,
    pub pipe_fd: libc::c_int,
    pub pipe_event: *mut bufferevent,
    pub pipe_off: size_t,
    pub screen: *mut screen,
    pub base: screen,
    pub status_screen: screen,
    pub status_size: size_t,
    pub saved_cx: u_int,
    pub saved_cy: u_int,
    pub saved_grid: *mut grid,
    pub saved_cell: grid_cell,
    pub mode: *const window_mode,
    pub modedata: *mut libc::c_void,
    pub modetimer: event,
    pub modelast: time_t,
    pub modeprefix: u_int,
    pub searchstr: *mut libc::c_char,
    pub entry: unnamed_14,
    pub tree_entry: unnamed_23,
}
pub const KEYC_KP_SIX: unnamed_25 = 268435558;
pub const KEYC_MOUSEDOWN1_BORDER: unnamed_25 = 268435467;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct winlinks {
    pub rbh_root: *mut winlink,
}
pub type __off_t = libc::c_long;
pub const KEYC_MOUSEMOVE_PANE: unnamed_25 = 268435462;
pub type speed_t = libc::c_uint;
pub const KEYC_MOUSEUP3_STATUS: unnamed_25 = 268435481;
pub type utf8_state = libc::c_uint;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_6 {
    pub ev_io_next: unnamed_35,
    pub ev_timeout: timeval,
}
pub const LAYOUT_WINDOWPANE: layout_type = 2;
pub type size_t = libc::c_ulong;
pub const KEYC_TRIPLECLICK2_PANE: unnamed_25 = 268435519;
pub type unnamed_7 = libc::c_uint;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_8 {
    pub rbe_left: *mut key_table,
    pub rbe_right: *mut key_table,
    pub rbe_parent: *mut key_table,
    pub rbe_color: libc::c_int,
}
pub const KEYC_KP_STAR: unnamed_25 = 268435550;
pub const KEYC_MOUSEDRAGEND2_STATUS: unnamed_25 = 268435496;
pub const KEYC_DOWN: unnamed_25 = 268435546;
pub const KEYC_KP_MINUS: unnamed_25 = 268435551;
pub const TTY_VT102: unnamed_16 = 2;
pub const KEYC_MOUSEDOWN3_BORDER: unnamed_25 = 268435473;
pub type cmd_retval = libc::c_int;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct window_pane_tree {
    pub rbh_root: *mut window_pane,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct status_line {
    pub timer: event,
    pub status: screen,
    pub old_status: *mut screen,
}
pub const KEYC_TRIPLECLICK2_BORDER: unnamed_25 = 268435521;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_9 {
    pub tqe_next: *mut cmd,
    pub tqe_prev: *mut *mut cmd,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct cmd_entry {
    pub name: *const libc::c_char,
    pub alias: *const libc::c_char,
    pub args: unnamed_17,
    pub usage: *const libc::c_char,
    pub source: cmd_entry_flag,
    pub target: cmd_entry_flag,
    pub flags: libc::c_int,
    pub exec: Option<unsafe extern "C" fn(_: *mut cmd, _: *mut cmdq_item)
                         -> cmd_retval>,
}
pub const LINE_SEL_LEFT_RIGHT: unnamed_5 = 1;
pub type u_char = __u_char;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct event {
    pub ev_active_next: unnamed,
    pub ev_next: unnamed_33,
    pub ev_timeout_pos: unnamed_38,
    pub ev_fd: libc::c_int,
    pub ev_base: *mut event_base,
    pub _ev: unnamed_29,
    pub ev_events: libc::c_short,
    pub ev_res: libc::c_short,
    pub ev_flags: libc::c_short,
    pub ev_pri: uint8_t,
    pub ev_closure: uint8_t,
    pub ev_timeout: timeval,
    pub ev_callback: Option<unsafe extern "C" fn(_: libc::c_int,
                                                 _: libc::c_short,
                                                 _: *mut libc::c_void) -> ()>,
    pub ev_arg: *mut libc::c_void,
}
pub const KEYC_LEFT: unnamed_25 = 268435547;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct session_groups {
    pub rbh_root: *mut session_group,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_10 {
    pub rbe_left: *mut session_group,
    pub rbe_right: *mut session_group,
    pub rbe_parent: *mut session_group,
    pub rbe_color: libc::c_int,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub __pad1: *mut libc::c_void,
    pub __pad2: *mut libc::c_void,
    pub __pad3: *mut libc::c_void,
    pub __pad4: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub const LAYOUT_TOPBOTTOM: layout_type = 1;
pub const KEYC_MOUSEUP1_STATUS: unnamed_25 = 268435475;
pub const KEYC_DOUBLECLICK2_BORDER: unnamed_25 = 268435512;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_11 {
    pub rbe_left: *mut session,
    pub rbe_right: *mut session,
    pub rbe_parent: *mut session,
    pub rbe_color: libc::c_int,
}
pub const KEYC_KP_PLUS: unnamed_25 = 268435555;
pub const OPTIONS_TABLE_WINDOW: options_table_scope = 3;
pub type wchar_t = libc::c_int;
pub const KEYC_MOUSEDRAGEND1_STATUS: unnamed_25 = 268435493;
pub const UTF8_MORE: utf8_state = 0;
pub type layout_type = libc::c_uint;
pub type __ssize_t = libc::c_long;
pub const KEYC_DOUBLECLICK2_STATUS: unnamed_25 = 268435511;
pub type options_table_type = libc::c_uint;
pub const KEYC_MOUSEUP1_PANE: unnamed_25 = 268435474;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct key_binding {
    pub key: key_code,
    pub cmdlist: *mut cmd_list,
    pub flags: libc::c_int,
    pub entry: unnamed_12,
}
pub const KEYC_MOUSEDOWN3_PANE: unnamed_25 = 268435471;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_12 {
    pub rbe_left: *mut key_binding,
    pub rbe_right: *mut key_binding,
    pub rbe_parent: *mut key_binding,
    pub rbe_color: libc::c_int,
}
pub const KEYC_TRIPLECLICK3_PANE: unnamed_25 = 268435522;
pub const KEYC_MOUSEDRAGEND3_STATUS: unnamed_25 = 268435499;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct tty {
    pub client: *mut client,
    pub sx: u_int,
    pub sy: u_int,
    pub cx: u_int,
    pub cy: u_int,
    pub cstyle: u_int,
    pub ccolour: *mut libc::c_char,
    pub mode: libc::c_int,
    pub rlower: u_int,
    pub rupper: u_int,
    pub rleft: u_int,
    pub rright: u_int,
    pub fd: libc::c_int,
    pub event_in: event,
    pub in_0: *mut evbuffer,
    pub event_out: event,
    pub out: *mut evbuffer,
    pub timer: event,
    pub discarded: size_t,
    pub tio: termios,
    pub cell: grid_cell,
    pub last_wp: libc::c_int,
    pub last_cell: grid_cell,
    pub flags: libc::c_int,
    pub term: *mut tty_term,
    pub term_name: *mut libc::c_char,
    pub term_flags: libc::c_int,
    pub term_type: unnamed_16,
    pub mouse: mouse_event,
    pub mouse_drag_flag: libc::c_int,
    pub mouse_drag_update: Option<unsafe extern "C" fn(_: *mut client,
                                                       _: *mut mouse_event)
                                      -> ()>,
    pub mouse_drag_release: Option<unsafe extern "C" fn(_: *mut client,
                                                        _: *mut mouse_event)
                                       -> ()>,
    pub key_timer: event,
    pub key_tree: *mut tty_key,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct winlink {
    pub idx: libc::c_int,
    pub session: *mut session,
    pub window: *mut window,
    pub status_width: size_t,
    pub status_cell: grid_cell,
    pub status_text: *mut libc::c_char,
    pub flags: libc::c_int,
    pub entry: unnamed_2,
    pub wentry: unnamed_27,
    pub sentry: unnamed_1,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union unnamed_13 {
    offset: u_int,
    data: unnamed_31,
}
pub const KEYC_MOUSEDOWN2_PANE: unnamed_25 = 268435468;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct key_bindings {
    pub rbh_root: *mut key_binding,
}
pub type prompt_free_cb =
    Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>;
pub type job_update_cb = Option<unsafe extern "C" fn(_: *mut job) -> ()>;
pub type options_table_scope = libc::c_uint;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct tty_terms {
    pub lh_first: *mut tty_term,
}
pub const OPTIONS_TABLE_SERVER: options_table_scope = 1;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_14 {
    pub tqe_next: *mut window_pane,
    pub tqe_prev: *mut *mut window_pane,
}
pub const KEYC_PPAGE: unnamed_25 = 268435543;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
pub const KEYC_TRIPLECLICK3_BORDER: unnamed_25 = 268435524;
pub const KEYC_WHEELUP_BORDER: unnamed_25 = 268435503;
pub const KEYC_MOUSEDRAGEND1_PANE: unnamed_25 = 268435492;
pub const KEYC_KP_FIVE: unnamed_25 = 268435557;
pub const KEYC_MOUSEDRAG2_PANE: unnamed_25 = 268435486;
pub const KEYC_TRIPLECLICK1_BORDER: unnamed_25 = 268435518;
pub const KEYC_RIGHT: unnamed_25 = 268435548;
pub type cmd_find_type = libc::c_uint;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct args_tree {
    pub rbh_root: *mut args_entry,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union unnamed_15 {
    __u6_addr8: [uint8_t; 16],
    __u6_addr16: [uint16_t; 8],
    __u6_addr32: [uint32_t; 4],
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct cmd {
    pub entry: *const cmd_entry,
    pub args: *mut args,
    pub file: *mut libc::c_char,
    pub line: u_int,
    pub flags: libc::c_int,
    pub qentry: unnamed_9,
}
pub type key_code = libc::c_ulonglong;
pub type unnamed_16 = libc::c_uint;
pub const KEYC_PASTE_START: unnamed_25 = 268435458;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct tty_key {
    pub ch: libc::c_char,
    pub key: key_code,
    pub left: *mut tty_key,
    pub right: *mut tty_key,
    pub next: *mut tty_key,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct message_entry {
    pub msg: *mut libc::c_char,
    pub msg_num: u_int,
    pub msg_time: time_t,
    pub entry: unnamed_36,
}
pub type __pid_t = libc::c_int;
pub const JOB_DEAD: unnamed_20 = 1;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_17 {
    pub template: *const libc::c_char,
    pub lower: libc::c_int,
    pub upper: libc::c_int,
}
pub const KEYC_MOUSEDRAG2_BORDER: unnamed_25 = 268435488;
pub const KEYC_FOCUS_IN: unnamed_25 = 268435456;
pub type __u_short = libc::c_ushort;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_18 {
    pub tqe_next: *mut layout_cell,
    pub tqe_prev: *mut *mut layout_cell,
}
pub const KEYC_MOUSEDOWN2_BORDER: unnamed_25 = 268435470;
pub const KEYC_KP_SEVEN: unnamed_25 = 268435552;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct window_mode {
    pub name: *const libc::c_char,
    pub init: Option<unsafe extern "C" fn(_: *mut window_pane,
                                          _: *mut cmd_find_state,
                                          _: *mut args) -> *mut screen>,
    pub free: Option<unsafe extern "C" fn(_: *mut window_pane) -> ()>,
    pub resize: Option<unsafe extern "C" fn(_: *mut window_pane, _: u_int,
                                            _: u_int) -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut window_pane, _: *mut client,
                                         _: *mut session, _: key_code,
                                         _: *mut mouse_event) -> ()>,
    pub key_table: Option<unsafe extern "C" fn(_: *mut window_pane)
                              -> *const libc::c_char>,
    pub command: Option<unsafe extern "C" fn(_: *mut window_pane,
                                             _: *mut client, _: *mut session,
                                             _: *mut args,
                                             _: *mut mouse_event) -> ()>,
}
pub const OPTIONS_TABLE_COLOUR: options_table_type = 3;
pub type job_complete_cb = Option<unsafe extern "C" fn(_: *mut job) -> ()>;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct in6_addr {
    pub __in6_u: unnamed_15,
}
pub const KEYC_MOUSEMOVE_BORDER: unnamed_25 = 268435464;
pub const OPTIONS_TABLE_NONE: options_table_scope = 0;
pub const KEYC_NPAGE: unnamed_25 = 268435542;
pub const JOB_CLOSED: unnamed_20 = 2;
pub type uint8_t = libc::c_uchar;
pub const KEYC_DOUBLECLICK1_PANE: unnamed_25 = 268435507;
pub const KEYC_F1: unnamed_25 = 268435526;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_19 {
    pub ev_signal_next: unnamed_0,
    pub ev_ncalls: libc::c_short,
    pub ev_pncalls: *mut libc::c_short,
}
pub type __u_char = libc::c_uchar;
pub type unnamed_20 = libc::c_uint;
pub const KEYC_KP_PERIOD: unnamed_25 = 268435564;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct windows {
    pub rbh_root: *mut window,
}
pub const KEYC_MOUSEUP2_PANE: unnamed_25 = 268435477;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_21 {
    pub tqh_first: *mut winlink,
    pub tqh_last: *mut *mut winlink,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct options_table_entry {
    pub name: *const libc::c_char,
    pub type_0: options_table_type,
    pub scope: options_table_scope,
    pub minimum: u_int,
    pub maximum: u_int,
    pub choices: *mut *const libc::c_char,
    pub default_str: *const libc::c_char,
    pub default_num: libc::c_longlong,
    pub separator: *const libc::c_char,
    pub style: *const libc::c_char,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct screen_sel {
    pub flag: libc::c_int,
    pub hidden: libc::c_int,
    pub rectflag: libc::c_int,
    pub lineflag: unnamed_5,
    pub modekeys: libc::c_int,
    pub sx: u_int,
    pub sy: u_int,
    pub ex: u_int,
    pub ey: u_int,
    pub cell: grid_cell,
}
pub const KEYC_MOUSEUP3_PANE: unnamed_25 = 268435480;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct cmdq_item {
    pub name: *const libc::c_char,
    pub queue: *mut cmdq_list,
    pub next: *mut cmdq_item,
    pub client: *mut client,
    pub type_0: cmdq_type,
    pub group: u_int,
    pub number: u_int,
    pub time: time_t,
    pub flags: libc::c_int,
    pub shared: *mut cmdq_shared,
    pub source: cmd_find_state,
    pub target: cmd_find_state,
    pub cmdlist: *mut cmd_list,
    pub cmd: *mut cmd,
    pub cb: cmdq_cb,
    pub data: *mut libc::c_void,
    pub entry: unnamed_34,
}
pub const KEYC_WHEELUP_PANE: unnamed_25 = 268435501;
pub type u_short = __u_short;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct window_panes {
    pub tqh_first: *mut window_pane,
    pub tqh_last: *mut *mut window_pane,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_22 {
    pub tqe_next: *mut session,
    pub tqe_prev: *mut *mut session,
}
pub const CMD_RETURN_STOP: cmd_retval = 2;
pub const TTY_VT320: unnamed_16 = 4;
pub const LINE_SEL_RIGHT_LEFT: unnamed_5 = 2;
pub const KEYC_MOUSEDRAGEND3_PANE: unnamed_25 = 268435498;
pub type __time_t = libc::c_long;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct key_tables {
    pub rbh_root: *mut key_table,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct window {
    pub id: u_int,
    pub name: *mut libc::c_char,
    pub name_event: event,
    pub name_time: timeval,
    pub alerts_timer: event,
    pub activity_time: timeval,
    pub active: *mut window_pane,
    pub last: *mut window_pane,
    pub panes: window_panes,
    pub lastlayout: libc::c_int,
    pub layout_root: *mut layout_cell,
    pub saved_layout_root: *mut layout_cell,
    pub old_layout: *mut libc::c_char,
    pub sx: u_int,
    pub sy: u_int,
    pub flags: libc::c_int,
    pub alerts_queued: libc::c_int,
    pub alerts_entry: unnamed_39,
    pub options: *mut options,
    pub style: grid_cell,
    pub active_style: grid_cell,
    pub references: u_int,
    pub winlinks: unnamed_21,
    pub entry: unnamed_3,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct grid_cell_entry {
    pub flags: u_char,
    pub unnamed: unnamed_13,
}
pub const KEYC_MOUSEUP1_BORDER: unnamed_25 = 268435476;
pub const KEYC_TRIPLECLICK1_PANE: unnamed_25 = 268435516;
pub const KEYC_DOUBLECLICK3_STATUS: unnamed_25 = 268435514;
pub const JOB_RUNNING: unnamed_20 = 0;
pub const LINE_SEL_NONE: unnamed_5 = 0;
pub const OPTIONS_TABLE_STRING: options_table_type = 0;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct layout_cell {
    pub type_0: layout_type,
    pub parent: *mut layout_cell,
    pub sx: u_int,
    pub sy: u_int,
    pub xoff: u_int,
    pub yoff: u_int,
    pub wp: *mut window_pane,
    pub cells: layout_cells,
    pub entry: unnamed_18,
}
pub const KEYC_F2: unnamed_25 = 268435527;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_23 {
    pub rbe_left: *mut window_pane,
    pub rbe_right: *mut window_pane,
    pub rbe_parent: *mut window_pane,
    pub rbe_color: libc::c_int,
}
pub const KEYC_MOUSEDRAGEND2_PANE: unnamed_25 = 268435495;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct layout_cells {
    pub tqh_first: *mut layout_cell,
    pub tqh_last: *mut *mut layout_cell,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_24 {
    pub tqh_first: *mut message_entry,
    pub tqh_last: *mut *mut message_entry,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct job {
    pub state: unnamed_20,
    pub flags: libc::c_int,
    pub cmd: *mut libc::c_char,
    pub pid: pid_t,
    pub status: libc::c_int,
    pub fd: libc::c_int,
    pub event: *mut bufferevent,
    pub updatecb: job_update_cb,
    pub completecb: job_complete_cb,
    pub freecb: job_free_cb,
    pub data: *mut libc::c_void,
    pub entry: unnamed_37,
}
pub const KEYC_MOUSEDRAG1_PANE: unnamed_25 = 268435483;
pub const KEYC_PASTE_END: unnamed_25 = 268435459;
pub const KEYC_MOUSEMOVE_STATUS: unnamed_25 = 268435463;
pub const KEYC_F5: unnamed_25 = 268435530;
pub type unnamed_25 = libc::c_uint;
pub const KEYC_IC: unnamed_25 = 268435538;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_26 {
    pub tqe_next: *mut event,
    pub tqe_prev: *mut *mut event,
}
pub const KEYC_F6: unnamed_25 = 268435531;
pub const OPTIONS_TABLE_CHOICE: options_table_type = 6;
pub type bufferevent_event_cb =
    Option<unsafe extern "C" fn(_: *mut bufferevent, _: libc::c_short,
                                _: *mut libc::c_void) -> ()>;
pub const KEYC_KP_NINE: unnamed_25 = 268435554;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct screen {
    pub title: *mut libc::c_char,
    pub titles: *mut screen_titles,
    pub grid: *mut grid,
    pub cx: u_int,
    pub cy: u_int,
    pub cstyle: u_int,
    pub ccolour: *mut libc::c_char,
    pub rupper: u_int,
    pub rlower: u_int,
    pub mode: libc::c_int,
    pub tabs: *mut bitstr_t,
    pub sel: screen_sel,
}
pub const KEYC_MOUSE: unnamed_25 = 268435460;
pub const KEYC_MOUSEDRAG3_PANE: unnamed_25 = 268435489;
pub const KEYC_DRAGGING: unnamed_25 = 268435461;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_27 {
    pub tqe_next: *mut winlink,
    pub tqe_prev: *mut *mut winlink,
}
pub type __off64_t = libc::c_long;
pub const KEYC_F9: unnamed_25 = 268435534;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: libc::c_int,
}
pub type cc_t = libc::c_uchar;
pub const TTY_VT220: unnamed_16 = 3;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct grid_cell {
    pub flags: u_char,
    pub attr: u_short,
    pub fg: libc::c_int,
    pub bg: libc::c_int,
    pub data: utf8_data,
}
pub const KEYC_MOUSEDRAGEND1_BORDER: unnamed_25 = 268435494;
pub const CMDQ_COMMAND: cmdq_type = 0;
pub const KEYC_BSPACE: unnamed_25 = 268435525;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_28 {
    pub tqh_first: *mut cmd,
    pub tqh_last: *mut *mut cmd,
}
pub const KEYC_F3: unnamed_25 = 268435528;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct mouse_event {
    pub valid: libc::c_int,
    pub key: key_code,
    pub statusat: libc::c_int,
    pub x: u_int,
    pub y: u_int,
    pub b: u_int,
    pub lx: u_int,
    pub ly: u_int,
    pub lb: u_int,
    pub s: libc::c_int,
    pub w: libc::c_int,
    pub wp: libc::c_int,
    pub sgr_type: u_int,
    pub sgr_b: u_int,
}
pub const KEYC_END: unnamed_25 = 268435541;
pub type __u_int = libc::c_uint;
pub type prompt_input_cb =
    Option<unsafe extern "C" fn(_: *mut client, _: *mut libc::c_void,
                                _: *const libc::c_char, _: libc::c_int)
               -> libc::c_int>;
pub const KEYC_DC: unnamed_25 = 268435539;
pub const KEYC_KP_SLASH: unnamed_25 = 268435549;
pub const KEYC_F12: unnamed_25 = 268435537;
pub const KEYC_DOUBLECLICK3_BORDER: unnamed_25 = 268435515;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union unnamed_29 {
    ev_io: unnamed_6,
    ev_signal: unnamed_19,
}
pub const UTF8_ERROR: utf8_state = 2;
pub const CMD_FIND_SESSION: cmd_find_type = 2;
pub type job_free_cb =
    Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>;
pub const KEYC_MOUSEDRAG2_STATUS: unnamed_25 = 268435487;
pub const KEYC_F4: unnamed_25 = 268435529;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_30 {
    pub tqe_next: *mut client,
    pub tqe_prev: *mut *mut client,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_31 {
    pub attr: u_char,
    pub fg: u_char,
    pub bg: u_char,
    pub data: u_char,
}
pub type time_t = __time_t;
pub const KEYC_DOUBLECLICK2_PANE: unnamed_25 = 268435510;
pub const KEYC_MOUSEDOWN1_STATUS: unnamed_25 = 268435466;
pub const KEYC_KP_FOUR: unnamed_25 = 268435556;
pub const KEYC_KP_THREE: unnamed_25 = 268435561;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct bufferevent {
    pub ev_base: *mut event_base,
    pub be_ops: *const bufferevent_ops,
    pub ev_read: event,
    pub ev_write: event,
    pub input: *mut evbuffer,
    pub output: *mut evbuffer,
    pub wm_read: event_watermark,
    pub wm_write: event_watermark,
    pub readcb: bufferevent_data_cb,
    pub writecb: bufferevent_data_cb,
    pub errorcb: bufferevent_event_cb,
    pub cbarg: *mut libc::c_void,
    pub timeout_read: timeval,
    pub timeout_write: timeval,
    pub enabled: libc::c_short,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct winlink_stack {
    pub tqh_first: *mut winlink,
    pub tqh_last: *mut *mut winlink,
}
pub const KEYC_KP_EIGHT: unnamed_25 = 268435553;
pub type cmdq_cb =
    Option<unsafe extern "C" fn(_: *mut cmdq_item, _: *mut libc::c_void)
               -> cmd_retval>;
pub const KEYC_WHEELDOWN_PANE: unnamed_25 = 268435504;
pub type tcflag_t = libc::c_uint;
pub const KEYC_DOUBLECLICK1_STATUS: unnamed_25 = 268435508;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct cmdq_shared {
    pub references: libc::c_int,
    pub flags: libc::c_int,
    pub formats: *mut format_tree,
    pub mouse: mouse_event,
    pub current: cmd_find_state,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct cmd_find_state {
    pub flags: libc::c_int,
    pub current: *mut cmd_find_state,
    pub s: *mut session,
    pub wl: *mut winlink,
    pub w: *mut window,
    pub wp: *mut window_pane,
    pub idx: libc::c_int,
}
pub type _IO_lock_t = ();
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_32 {
    pub tqh_first: *mut session,
    pub tqh_last: *mut *mut session,
}
pub const OPTIONS_TABLE_ARRAY: options_table_type = 8;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_33 {
    pub tqe_next: *mut event,
    pub tqe_prev: *mut *mut event,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_34 {
    pub tqe_next: *mut cmdq_item,
    pub tqe_prev: *mut *mut cmdq_item,
}
pub const KEYC_WHEELDOWN_BORDER: unnamed_25 = 268435506;
pub const KEYC_MOUSEUP2_BORDER: unnamed_25 = 268435479;
pub const KEYC_MOUSEDRAGEND2_BORDER: unnamed_25 = 268435497;
pub type FILE = _IO_FILE;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_35 {
    pub tqe_next: *mut event,
    pub tqe_prev: *mut *mut event,
}
pub const TTY_VT100: unnamed_16 = 0;
pub const KEYC_KP_TWO: unnamed_25 = 268435560;
pub const KEYC_F8: unnamed_25 = 268435533;
pub const KEYC_MOUSEDOWN2_STATUS: unnamed_25 = 268435469;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_36 {
    pub tqe_next: *mut message_entry,
    pub tqe_prev: *mut *mut message_entry,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct session_group {
    pub name: *const libc::c_char,
    pub sessions: unnamed_32,
    pub entry: unnamed_10,
}
pub const TTY_VT420: unnamed_16 = 5;
pub const PROMPT_COMMAND: unnamed_7 = 1;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct session {
    pub id: u_int,
    pub name: *mut libc::c_char,
    pub cwd: *const libc::c_char,
    pub creation_time: timeval,
    pub last_attached_time: timeval,
    pub activity_time: timeval,
    pub last_activity_time: timeval,
    pub lock_timer: event,
    pub sx: u_int,
    pub sy: u_int,
    pub curw: *mut winlink,
    pub lastw: winlink_stack,
    pub windows: winlinks,
    pub statusat: libc::c_int,
    pub hooks: *mut hooks,
    pub options: *mut options,
    pub flags: libc::c_int,
    pub attached: u_int,
    pub tio: *mut termios,
    pub environ: *mut environ,
    pub references: libc::c_int,
    pub gentry: unnamed_22,
    pub entry: unnamed_11,
}
pub const CMD_RETURN_WAIT: cmd_retval = 1;
pub const KEYC_HOME: unnamed_25 = 268435540;
pub type uint16_t = libc::c_ushort;
pub const KEYC_MOUSEDRAG3_STATUS: unnamed_25 = 268435490;
pub const KEYC_MOUSEDOWN1_PANE: unnamed_25 = 268435465;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_37 {
    pub le_next: *mut job,
    pub le_prev: *mut *mut job,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union unnamed_38 {
    ev_next_with_common_timeout: unnamed_26,
    min_heap_idx: libc::c_int,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct grid {
    pub flags: libc::c_int,
    pub sx: u_int,
    pub sy: u_int,
    pub hscrolled: u_int,
    pub hsize: u_int,
    pub hlimit: u_int,
    pub linedata: *mut grid_line,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub struct unnamed_39 {
    pub tqe_next: *mut window,
    pub tqe_prev: *mut *mut window,
}
#[no_mangle]
pub unsafe extern "C" fn status_timer_start(mut c: *mut client) -> () {
    let mut s: *mut session = (*c).session;
    if 0 != event_initialized(&mut (*c).status.timer as *mut event) {
        event_del(&mut (*c).status.timer as *mut event);
    } else {
        event_set(&mut (*c).status.timer as *mut event, 1i32.wrapping_neg(),
                  0i32 as libc::c_short, Some(status_timer_callback),
                  c as *mut libc::c_void);
    }
    if s != 0 as *mut libc::c_void as *mut session &&
           0 !=
               options_get_number((*s).options,
                                  b"status\x00" as *const u8 as
                                      *const libc::c_char) {
        status_timer_callback(1i32.wrapping_neg(), 0i32 as libc::c_short,
                              c as *mut libc::c_void);
    };
}
unsafe extern "C" fn status_timer_callback(mut fd: libc::c_int,
                                           mut events: libc::c_short,
                                           mut arg: *mut libc::c_void) -> () {
    let mut c: *mut client = arg as *mut client;
    let mut s: *mut session = (*c).session;
    let mut tv: timeval = timeval{tv_sec: 0, tv_usec: 0,};
    event_del(&mut (*c).status.timer as *mut event);
    if s == 0 as *mut libc::c_void as *mut session {
        return
    } else {
        if (*c).message_string == 0 as *mut libc::c_void as *mut libc::c_char
               &&
               (*c).prompt_string ==
                   0 as *mut libc::c_void as *mut libc::c_char {
            (*c).flags |= 16i32
        }
        let ref mut fresh0 = (*(&mut tv as *mut timeval)).tv_usec;
        *fresh0 = 0i32 as __suseconds_t;
        (*(&mut tv as *mut timeval)).tv_sec = *fresh0;
        tv.tv_sec =
            options_get_number((*s).options,
                               b"status-interval\x00" as *const u8 as
                                   *const libc::c_char) as __time_t;
        if tv.tv_sec != 0i32 as libc::c_long {
            event_add(&mut (*c).status.timer as *mut event,
                      &mut tv as *mut timeval);
        }
        log_debug(b"client %p, status interval %d\x00" as *const u8 as
                      *const libc::c_char, c, tv.tv_sec as libc::c_int);
        return;
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_timer_start_all() -> () {
    let mut c: *mut client = 0 as *mut client;
    c = (*(&mut clients as *mut clients)).tqh_first;
    while c != 0 as *mut libc::c_void as *mut client {
        status_timer_start(c);
        c = (*c).entry.tqe_next
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_update_saved(mut s: *mut session) -> () {
    if 0 ==
           options_get_number((*s).options,
                              b"status\x00" as *const u8 as
                                  *const libc::c_char) {
        (*s).statusat = 1i32.wrapping_neg()
    } else if options_get_number((*s).options,
                                 b"status-position\x00" as *const u8 as
                                     *const libc::c_char) ==
                  0i32 as libc::c_longlong {
        (*s).statusat = 0i32
    } else { (*s).statusat = 1i32 };
}
#[no_mangle]
pub unsafe extern "C" fn status_at_line(mut c: *mut client) -> libc::c_int {
    let mut s: *mut session = (*c).session;
    if 0 != (*c).flags & 8388608i32 {
        return 1i32.wrapping_neg()
    } else if (*s).statusat != 1i32 {
        return (*s).statusat
    } else {
        return (*c).tty.sy.wrapping_sub(status_line_size(s)) as libc::c_int
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_line_size(mut s: *mut session) -> u_int {
    if (*s).statusat == 1i32.wrapping_neg() {
        return 0i32 as u_int
    } else { return 1i32 as u_int };
}
#[no_mangle]
pub unsafe extern "C" fn status_get_window_at(mut c: *mut client,
                                              mut x: u_int) -> *mut window {
    let mut s: *mut session = (*c).session;
    let mut wl: *mut winlink = 0 as *mut winlink;
    let mut oo: *mut options = 0 as *mut options;
    let mut sep: *const libc::c_char = 0 as *const libc::c_char;
    let mut seplen: size_t = 0;
    x =
        (x as libc::c_uint).wrapping_add((*c).wlmouse as libc::c_uint) as
            u_int as u_int;
    wl =
        winlinks_RB_MINMAX(&mut (*s).windows as *mut winlinks,
                           1i32.wrapping_neg());
    loop  {
        if wl != 0 as *mut libc::c_void as *mut winlink {
            oo = (*(*wl).window).options;
            sep =
                options_get_string(oo,
                                   b"window-status-separator\x00" as *const u8
                                       as *const libc::c_char);
            seplen =
                screen_write_cstrlen(b"%s\x00" as *const u8 as
                                         *const libc::c_char, sep);
            if (x as libc::c_ulong) < (*wl).status_width {
                return (*wl).window
            } else {
                x =
                    (x as
                         libc::c_ulong).wrapping_sub((*wl).status_width.wrapping_add(seplen))
                        as u_int as u_int;
                wl = winlinks_RB_NEXT(wl)
            }
        } else { return 0 as *mut window }
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_redraw(mut c: *mut client) -> libc::c_int {
    let mut current_block: u64;
    let mut ctx: screen_write_ctx =
        screen_write_ctx{wp: 0 as *mut window_pane,
                         s: 0 as *mut screen,
                         item: 0 as *mut screen_write_collect_item,
                         list: 0 as *mut screen_write_collect_line,
                         scrolled: 0,
                         bg: 0,
                         cells: 0,
                         written: 0,
                         skipped: 0,};
    let mut s: *mut session = (*c).session;
    let mut wl: *mut winlink = 0 as *mut winlink;
    let mut old_status: screen =
        screen{title: 0 as *mut libc::c_char,
               titles: 0 as *mut screen_titles,
               grid: 0 as *mut grid,
               cx: 0,
               cy: 0,
               cstyle: 0,
               ccolour: 0 as *mut libc::c_char,
               rupper: 0,
               rlower: 0,
               mode: 0,
               tabs: 0 as *mut bitstr_t,
               sel:
                   screen_sel{flag: 0,
                              hidden: 0,
                              rectflag: 0,
                              lineflag: LINE_SEL_NONE,
                              modekeys: 0,
                              sx: 0,
                              sy: 0,
                              ex: 0,
                              ey: 0,
                              cell:
                                  grid_cell{flags: 0,
                                            attr: 0,
                                            fg: 0,
                                            bg: 0,
                                            data:
                                                utf8_data{data: [0; 9],
                                                          have: 0,
                                                          size: 0,
                                                          width: 0,},},},};
    let mut window_list: screen =
        screen{title: 0 as *mut libc::c_char,
               titles: 0 as *mut screen_titles,
               grid: 0 as *mut grid,
               cx: 0,
               cy: 0,
               cstyle: 0,
               ccolour: 0 as *mut libc::c_char,
               rupper: 0,
               rlower: 0,
               mode: 0,
               tabs: 0 as *mut bitstr_t,
               sel:
                   screen_sel{flag: 0,
                              hidden: 0,
                              rectflag: 0,
                              lineflag: LINE_SEL_NONE,
                              modekeys: 0,
                              sx: 0,
                              sy: 0,
                              ex: 0,
                              ey: 0,
                              cell:
                                  grid_cell{flags: 0,
                                            attr: 0,
                                            fg: 0,
                                            bg: 0,
                                            data:
                                                utf8_data{data: [0; 9],
                                                          have: 0,
                                                          size: 0,
                                                          width: 0,},},},};
    let mut stdgc: grid_cell =
        grid_cell{flags: 0,
                  attr: 0,
                  fg: 0,
                  bg: 0,
                  data:
                      utf8_data{data: [0; 9], have: 0, size: 0, width: 0,},};
    let mut lgc: grid_cell =
        grid_cell{flags: 0,
                  attr: 0,
                  fg: 0,
                  bg: 0,
                  data:
                      utf8_data{data: [0; 9], have: 0, size: 0, width: 0,},};
    let mut rgc: grid_cell =
        grid_cell{flags: 0,
                  attr: 0,
                  fg: 0,
                  bg: 0,
                  data:
                      utf8_data{data: [0; 9], have: 0, size: 0, width: 0,},};
    let mut gc: grid_cell =
        grid_cell{flags: 0,
                  attr: 0,
                  fg: 0,
                  bg: 0,
                  data:
                      utf8_data{data: [0; 9], have: 0, size: 0, width: 0,},};
    let mut oo: *mut options = 0 as *mut options;
    let mut t: time_t = 0;
    let mut left: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut right: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut sep: *const libc::c_char = 0 as *const libc::c_char;
    let mut offset: u_int = 0;
    let mut needed: u_int = 0;
    let mut lines: u_int = 0;
    let mut wlstart: u_int = 0;
    let mut wlwidth: u_int = 0;
    let mut wlavailable: u_int = 0;
    let mut wloffset: u_int = 0;
    let mut wlsize: u_int = 0;
    let mut llen: size_t = 0;
    let mut rlen: size_t = 0;
    let mut seplen: size_t = 0;
    let mut larrow: libc::c_int = 0;
    let mut rarrow: libc::c_int = 0;
    if (*c).status.old_status != 0 as *mut libc::c_void as *mut screen {
        screen_free((*c).status.old_status);
        free((*c).status.old_status as *mut libc::c_void);
        (*c).status.old_status = 0 as *mut screen
    }
    lines = status_line_size(s);
    if (*c).tty.sy == 0i32 as libc::c_uint || lines == 0i32 as libc::c_uint {
        return 1i32
    } else {
        right = 0 as *mut libc::c_char;
        left = right;
        rarrow = 0i32;
        larrow = rarrow;
        t = time(0 as *mut time_t);
        style_apply(&mut stdgc as *mut grid_cell, (*s).options,
                    b"status-style\x00" as *const u8 as *const libc::c_char);
        memcpy(&mut old_status as *mut screen as *mut libc::c_void,
               &mut (*c).status.status as *mut screen as *const libc::c_void,
               ::std::mem::size_of::<screen>() as libc::c_ulong);
        screen_init(&mut (*c).status.status as *mut screen, (*c).tty.sx,
                    lines, 0i32 as u_int);
        screen_write_start(&mut ctx as *mut screen_write_ctx,
                           0 as *mut window_pane,
                           &mut (*c).status.status as *mut screen);
        offset = 0i32 as u_int;
        while offset < lines.wrapping_mul((*c).tty.sx) {
            screen_write_putc(&mut ctx as *mut screen_write_ctx,
                              &mut stdgc as *mut grid_cell, 32 as u_char);
            offset = offset.wrapping_add(1)
        }
        screen_write_stop(&mut ctx as *mut screen_write_ctx);
        if !((*c).tty.sy < lines) {
            memcpy(&mut lgc as *mut grid_cell as *mut libc::c_void,
                   &mut stdgc as *mut grid_cell as *const libc::c_void,
                   ::std::mem::size_of::<grid_cell>() as libc::c_ulong);
            left =
                status_redraw_get_left(c, t, &mut lgc as *mut grid_cell,
                                       &mut llen as *mut size_t);
            memcpy(&mut rgc as *mut grid_cell as *mut libc::c_void,
                   &mut stdgc as *mut grid_cell as *const libc::c_void,
                   ::std::mem::size_of::<grid_cell>() as libc::c_ulong);
            right =
                status_redraw_get_right(c, t, &mut rgc as *mut grid_cell,
                                        &mut rlen as *mut size_t);
            needed = 0i32 as u_int;
            if llen != 0i32 as libc::c_ulong {
                needed =
                    (needed as libc::c_ulong).wrapping_add(llen) as u_int as
                        u_int
            }
            if rlen != 0i32 as libc::c_ulong {
                needed =
                    (needed as libc::c_ulong).wrapping_add(rlen) as u_int as
                        u_int
            }
            if !((*c).tty.sx == 0i32 as libc::c_uint || (*c).tty.sx <= needed)
               {
                wlavailable = (*c).tty.sx.wrapping_sub(needed);
                wlwidth = 0i32 as u_int;
                wloffset = wlwidth;
                wlstart = wloffset;
                wl =
                    winlinks_RB_MINMAX(&mut (*s).windows as *mut winlinks,
                                       1i32.wrapping_neg());
                while wl != 0 as *mut libc::c_void as *mut winlink {
                    free((*wl).status_text as *mut libc::c_void);
                    memcpy(&mut (*wl).status_cell as *mut grid_cell as
                               *mut libc::c_void,
                           &mut stdgc as *mut grid_cell as
                               *const libc::c_void,
                           ::std::mem::size_of::<grid_cell>() as
                               libc::c_ulong);
                    (*wl).status_text =
                        status_print(c, wl, t,
                                     &mut (*wl).status_cell as
                                         *mut grid_cell);
                    (*wl).status_width =
                        screen_write_cstrlen(b"%s\x00" as *const u8 as
                                                 *const libc::c_char,
                                             (*wl).status_text);
                    if wl == (*s).curw { wloffset = wlwidth }
                    oo = (*(*wl).window).options;
                    sep =
                        options_get_string(oo,
                                           b"window-status-separator\x00" as
                                               *const u8 as
                                               *const libc::c_char);
                    seplen =
                        screen_write_cstrlen(b"%s\x00" as *const u8 as
                                                 *const libc::c_char, sep);
                    wlwidth =
                        (wlwidth as
                             libc::c_ulong).wrapping_add((*wl).status_width.wrapping_add(seplen))
                            as u_int as u_int;
                    wl = winlinks_RB_NEXT(wl)
                }
                screen_init(&mut window_list as *mut screen, wlwidth,
                            1i32 as u_int, 0i32 as u_int);
                screen_write_start(&mut ctx as *mut screen_write_ctx,
                                   0 as *mut window_pane,
                                   &mut window_list as *mut screen);
                wl =
                    winlinks_RB_MINMAX(&mut (*s).windows as *mut winlinks,
                                       1i32.wrapping_neg());
                while wl != 0 as *mut libc::c_void as *mut winlink {
                    screen_write_cnputs(&mut ctx as *mut screen_write_ctx,
                                        1i32.wrapping_neg() as ssize_t,
                                        &mut (*wl).status_cell as
                                            *mut grid_cell,
                                        b"%s\x00" as *const u8 as
                                            *const libc::c_char,
                                        (*wl).status_text);
                    oo = (*(*wl).window).options;
                    sep =
                        options_get_string(oo,
                                           b"window-status-separator\x00" as
                                               *const u8 as
                                               *const libc::c_char);
                    screen_write_cnputs(&mut ctx as *mut screen_write_ctx,
                                        1i32.wrapping_neg() as ssize_t,
                                        &mut stdgc as *mut grid_cell,
                                        b"%s\x00" as *const u8 as
                                            *const libc::c_char, sep);
                    wl = winlinks_RB_NEXT(wl)
                }
                screen_write_stop(&mut ctx as *mut screen_write_ctx);
                if wlwidth <= wlavailable {
                    current_block = 12852488818099017248;
                } else {
                    wlsize = (*(*s).curw).status_width as u_int;
                    if wloffset.wrapping_add(wlsize) < wlavailable {
                        if wlavailable > 0i32 as libc::c_uint {
                            rarrow = 1i32;
                            wlavailable = wlavailable.wrapping_sub(1)
                        }
                        wlwidth = wlavailable
                    } else {
                        if wlavailable > 0i32 as libc::c_uint {
                            larrow = 1i32;
                            wlavailable = wlavailable.wrapping_sub(1)
                        }
                        wlstart =
                            wloffset.wrapping_add(wlsize).wrapping_sub(wlavailable);
                        if wlavailable > 0i32 as libc::c_uint &&
                               wlwidth >
                                   wlstart.wrapping_add(wlavailable).wrapping_add(1i32
                                                                                      as
                                                                                      libc::c_uint)
                           {
                            rarrow = 1i32;
                            wlstart = wlstart.wrapping_add(1);
                            wlavailable = wlavailable.wrapping_sub(1)
                        }
                        wlwidth = wlavailable
                    }
                    if wlwidth == 0i32 as libc::c_uint ||
                           wlavailable == 0i32 as libc::c_uint {
                        screen_free(&mut window_list as *mut screen);
                        current_block = 8506478340253986099;
                    } else {
                        offset = 0i32 as u_int;
                        wl =
                            winlinks_RB_MINMAX(&mut (*s).windows as
                                                   *mut winlinks,
                                               1i32.wrapping_neg());
                        while wl != 0 as *mut libc::c_void as *mut winlink {
                            if 0 != (*wl).flags & (1i32 | 2i32 | 4i32) &&
                                   larrow == 1i32 && offset < wlstart {
                                larrow = 1i32.wrapping_neg()
                            }
                            offset =
                                (offset as
                                     libc::c_ulong).wrapping_add((*wl).status_width)
                                    as u_int as u_int;
                            if 0 != (*wl).flags & (1i32 | 2i32 | 4i32) &&
                                   rarrow == 1i32 &&
                                   offset > wlstart.wrapping_add(wlwidth) {
                                rarrow = 1i32.wrapping_neg()
                            }
                            wl = winlinks_RB_NEXT(wl)
                        }
                        current_block = 12852488818099017248;
                    }
                }
                match current_block {
                    8506478340253986099 => { }
                    _ => {
                        screen_write_start(&mut ctx as *mut screen_write_ctx,
                                           0 as *mut window_pane,
                                           &mut (*c).status.status as
                                               *mut screen);
                        screen_write_cursormove(&mut ctx as
                                                    *mut screen_write_ctx,
                                                0i32 as u_int, 0i32 as u_int);
                        if llen != 0i32 as libc::c_ulong {
                            screen_write_cnputs(&mut ctx as
                                                    *mut screen_write_ctx,
                                                llen as ssize_t,
                                                &mut lgc as *mut grid_cell,
                                                b"%s\x00" as *const u8 as
                                                    *const libc::c_char,
                                                left);
                        }
                        if larrow != 0i32 {
                            memcpy(&mut gc as *mut grid_cell as
                                       *mut libc::c_void,
                                   &mut stdgc as *mut grid_cell as
                                       *const libc::c_void,
                                   ::std::mem::size_of::<grid_cell>() as
                                       libc::c_ulong);
                            if larrow == 1i32.wrapping_neg() {
                                gc.attr =
                                    (gc.attr as libc::c_int ^ 16i32) as
                                        u_short
                            }
                            screen_write_putc(&mut ctx as
                                                  *mut screen_write_ctx,
                                              &mut gc as *mut grid_cell,
                                              60 as u_char);
                        }
                        if rarrow != 0i32 {
                            screen_write_cursormove(&mut ctx as
                                                        *mut screen_write_ctx,
                                                    ((*c).tty.sx as
                                                         libc::c_ulong).wrapping_sub(rlen).wrapping_sub(1i32
                                                                                                            as
                                                                                                            libc::c_ulong)
                                                        as u_int,
                                                    0i32 as u_int);
                            memcpy(&mut gc as *mut grid_cell as
                                       *mut libc::c_void,
                                   &mut stdgc as *mut grid_cell as
                                       *const libc::c_void,
                                   ::std::mem::size_of::<grid_cell>() as
                                       libc::c_ulong);
                            if rarrow == 1i32.wrapping_neg() {
                                gc.attr =
                                    (gc.attr as libc::c_int ^ 16i32) as
                                        u_short
                            }
                            screen_write_putc(&mut ctx as
                                                  *mut screen_write_ctx,
                                              &mut gc as *mut grid_cell,
                                              62 as u_char);
                        } else {
                            screen_write_cursormove(&mut ctx as
                                                        *mut screen_write_ctx,
                                                    ((*c).tty.sx as
                                                         libc::c_ulong).wrapping_sub(rlen)
                                                        as u_int,
                                                    0i32 as u_int);
                        }
                        if rlen != 0i32 as libc::c_ulong {
                            screen_write_cnputs(&mut ctx as
                                                    *mut screen_write_ctx,
                                                rlen as ssize_t,
                                                &mut rgc as *mut grid_cell,
                                                b"%s\x00" as *const u8 as
                                                    *const libc::c_char,
                                                right);
                        }
                        if llen != 0i32 as libc::c_ulong {
                            wloffset = llen as u_int
                        } else { wloffset = 0i32 as u_int }
                        if wlwidth < wlavailable {
                            match options_get_number((*s).options,
                                                     b"status-justify\x00" as
                                                         *const u8 as
                                                         *const libc::c_char)
                                {
                                1 => {
                                    current_block = 9113849443971521397;
                                    match current_block {
                                        18143773739680929817 => {
                                            wloffset =
                                                (wloffset as
                                                     libc::c_uint).wrapping_add(wlavailable.wrapping_sub(wlwidth))
                                                    as u_int as u_int
                                        }
                                        _ => {
                                            wloffset =
                                                (wloffset as
                                                     libc::c_uint).wrapping_add(wlavailable.wrapping_sub(wlwidth).wrapping_div(2i32
                                                                                                                                   as
                                                                                                                                   libc::c_uint))
                                                    as u_int as u_int
                                        }
                                    }
                                }
                                2 => {
                                    current_block = 18143773739680929817;
                                    match current_block {
                                        18143773739680929817 => {
                                            wloffset =
                                                (wloffset as
                                                     libc::c_uint).wrapping_add(wlavailable.wrapping_sub(wlwidth))
                                                    as u_int as u_int
                                        }
                                        _ => {
                                            wloffset =
                                                (wloffset as
                                                     libc::c_uint).wrapping_add(wlavailable.wrapping_sub(wlwidth).wrapping_div(2i32
                                                                                                                                   as
                                                                                                                                   libc::c_uint))
                                                    as u_int as u_int
                                        }
                                    }
                                }
                                _ => { }
                            }
                        }
                        if larrow != 0i32 {
                            wloffset = wloffset.wrapping_add(1)
                        }
                        (*c).wlmouse =
                            wloffset.wrapping_neg().wrapping_add(wlstart) as
                                libc::c_int;
                        screen_write_cursormove(&mut ctx as
                                                    *mut screen_write_ctx,
                                                wloffset, 0i32 as u_int);
                        screen_write_fast_copy(&mut ctx as
                                                   *mut screen_write_ctx,
                                               &mut window_list as
                                                   *mut screen, wlstart,
                                               0i32 as u_int, wlwidth,
                                               1i32 as u_int);
                        screen_free(&mut window_list as *mut screen);
                        screen_write_stop(&mut ctx as *mut screen_write_ctx);
                    }
                }
            }
        }
        free(left as *mut libc::c_void);
        free(right as *mut libc::c_void);
        if grid_compare((*c).status.status.grid, old_status.grid) == 0i32 {
            screen_free(&mut old_status as *mut screen);
            return 0i32
        } else { screen_free(&mut old_status as *mut screen); return 1i32 }
    };
}
unsafe extern "C" fn status_print(mut c: *mut client, mut wl: *mut winlink,
                                  mut t: time_t, mut gc: *mut grid_cell)
 -> *mut libc::c_char {
    let mut oo: *mut options = (*(*wl).window).options;
    let mut s: *mut session = (*c).session;
    let mut fmt: *const libc::c_char = 0 as *const libc::c_char;
    let mut text: *mut libc::c_char = 0 as *mut libc::c_char;
    style_apply_update(gc, oo,
                       b"window-status-style\x00" as *const u8 as
                           *const libc::c_char);
    fmt =
        options_get_string(oo,
                           b"window-status-format\x00" as *const u8 as
                               *const libc::c_char);
    if wl == (*s).curw {
        style_apply_update(gc, oo,
                           b"window-status-current-style\x00" as *const u8 as
                               *const libc::c_char);
        fmt =
            options_get_string(oo,
                               b"window-status-current-format\x00" as
                                   *const u8 as *const libc::c_char)
    }
    if wl == (*(&mut (*s).lastw as *mut winlink_stack)).tqh_first {
        style_apply_update(gc, oo,
                           b"window-status-last-style\x00" as *const u8 as
                               *const libc::c_char);
    }
    if 0 != (*wl).flags & 1i32 {
        style_apply_update(gc, oo,
                           b"window-status-bell-style\x00" as *const u8 as
                               *const libc::c_char);
    } else if 0 != (*wl).flags & (2i32 | 4i32) {
        style_apply_update(gc, oo,
                           b"window-status-activity-style\x00" as *const u8 as
                               *const libc::c_char);
    }
    text = status_replace(c, wl, fmt, t);
    return text;
}
unsafe extern "C" fn status_replace(mut c: *mut client, mut wl: *mut winlink,
                                    mut fmt: *const libc::c_char,
                                    mut t: time_t) -> *mut libc::c_char {
    let mut ft: *mut format_tree = 0 as *mut format_tree;
    let mut expanded: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tag: u_int = 0;
    if fmt == 0 as *mut libc::c_void as *const libc::c_char {
        return xstrdup(b"\x00" as *const u8 as *const libc::c_char)
    } else {
        if wl != 0 as *mut libc::c_void as *mut winlink {
            tag = 1073741824u32 | (*(*wl).window).id
        } else { tag = 0i32 as u_int }
        if 0 != (*c).flags & 524288i32 {
            ft =
                format_create(c, 0 as *mut cmdq_item, tag as libc::c_int,
                              1i32 | 2i32)
        } else {
            ft =
                format_create(c, 0 as *mut cmdq_item, tag as libc::c_int,
                              1i32)
        }
        format_defaults(ft, c, 0 as *mut session, wl, 0 as *mut window_pane);
        expanded = format_expand_time(ft, fmt, t);
        format_free(ft);
        return expanded
    };
}
unsafe extern "C" fn status_redraw_get_right(mut c: *mut client,
                                             mut t: time_t,
                                             mut gc: *mut grid_cell,
                                             mut size: *mut size_t)
 -> *mut libc::c_char {
    let mut s: *mut session = (*c).session;
    let mut template: *const libc::c_char = 0 as *const libc::c_char;
    let mut right: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut rightlen: size_t = 0;
    style_apply_update(gc, (*s).options,
                       b"status-right-style\x00" as *const u8 as
                           *const libc::c_char);
    template =
        options_get_string((*s).options,
                           b"status-right\x00" as *const u8 as
                               *const libc::c_char);
    right = status_replace(c, 0 as *mut winlink, template, t);
    *size =
        options_get_number((*s).options,
                           b"status-right-length\x00" as *const u8 as
                               *const libc::c_char) as size_t;
    rightlen =
        screen_write_cstrlen(b"%s\x00" as *const u8 as *const libc::c_char,
                             right);
    if rightlen < *size { *size = rightlen }
    return right;
}
unsafe extern "C" fn status_redraw_get_left(mut c: *mut client, mut t: time_t,
                                            mut gc: *mut grid_cell,
                                            mut size: *mut size_t)
 -> *mut libc::c_char {
    let mut s: *mut session = (*c).session;
    let mut template: *const libc::c_char = 0 as *const libc::c_char;
    let mut left: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut leftlen: size_t = 0;
    style_apply_update(gc, (*s).options,
                       b"status-left-style\x00" as *const u8 as
                           *const libc::c_char);
    template =
        options_get_string((*s).options,
                           b"status-left\x00" as *const u8 as
                               *const libc::c_char);
    left = status_replace(c, 0 as *mut winlink, template, t);
    *size =
        options_get_number((*s).options,
                           b"status-left-length\x00" as *const u8 as
                               *const libc::c_char) as size_t;
    leftlen =
        screen_write_cstrlen(b"%s\x00" as *const u8 as *const libc::c_char,
                             left);
    if leftlen < *size { *size = leftlen }
    return left;
}
#[no_mangle]
pub unsafe extern "C" fn status_message_clear(mut c: *mut client) -> () {
    if (*c).message_string == 0 as *mut libc::c_void as *mut libc::c_char {
        return
    } else {
        free((*c).message_string as *mut libc::c_void);
        (*c).message_string = 0 as *mut libc::c_char;
        if (*c).prompt_string == 0 as *mut libc::c_void as *mut libc::c_char {
            (*c).tty.flags &= !(1i32 | 2i32)
        }
        (*c).flags |= 8i32;
        screen_reinit(&mut (*c).status.status as *mut screen);
        return;
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_message_redraw(mut c: *mut client)
 -> libc::c_int {
    let mut ctx: screen_write_ctx =
        screen_write_ctx{wp: 0 as *mut window_pane,
                         s: 0 as *mut screen,
                         item: 0 as *mut screen_write_collect_item,
                         list: 0 as *mut screen_write_collect_line,
                         scrolled: 0,
                         bg: 0,
                         cells: 0,
                         written: 0,
                         skipped: 0,};
    let mut s: *mut session = (*c).session;
    let mut old_status: screen =
        screen{title: 0 as *mut libc::c_char,
               titles: 0 as *mut screen_titles,
               grid: 0 as *mut grid,
               cx: 0,
               cy: 0,
               cstyle: 0,
               ccolour: 0 as *mut libc::c_char,
               rupper: 0,
               rlower: 0,
               mode: 0,
               tabs: 0 as *mut bitstr_t,
               sel:
                   screen_sel{flag: 0,
                              hidden: 0,
                              rectflag: 0,
                              lineflag: LINE_SEL_NONE,
                              modekeys: 0,
                              sx: 0,
                              sy: 0,
                              ex: 0,
                              ey: 0,
                              cell:
                                  grid_cell{flags: 0,
                                            attr: 0,
                                            fg: 0,
                                            bg: 0,
                                            data:
                                                utf8_data{data: [0; 9],
                                                          have: 0,
                                                          size: 0,
                                                          width: 0,},},},};
    let mut len: size_t = 0;
    let mut gc: grid_cell =
        grid_cell{flags: 0,
                  attr: 0,
                  fg: 0,
                  bg: 0,
                  data:
                      utf8_data{data: [0; 9], have: 0, size: 0, width: 0,},};
    let mut lines: u_int = 0;
    let mut offset: u_int = 0;
    if (*c).tty.sx == 0i32 as libc::c_uint ||
           (*c).tty.sy == 0i32 as libc::c_uint {
        return 0i32
    } else {
        memcpy(&mut old_status as *mut screen as *mut libc::c_void,
               &mut (*c).status.status as *mut screen as *const libc::c_void,
               ::std::mem::size_of::<screen>() as libc::c_ulong);
        lines = status_line_size((*c).session);
        if lines <= 1i32 as libc::c_uint {
            lines = 1i32 as u_int;
            screen_init(&mut (*c).status.status as *mut screen, (*c).tty.sx,
                        1i32 as u_int, 0i32 as u_int);
        } else {
            screen_init(&mut (*c).status.status as *mut screen, (*c).tty.sx,
                        lines, 0i32 as u_int);
        }
        len =
            screen_write_strlen(b"%s\x00" as *const u8 as *const libc::c_char,
                                (*c).message_string);
        if len > (*c).tty.sx as libc::c_ulong { len = (*c).tty.sx as size_t }
        style_apply(&mut gc as *mut grid_cell, (*s).options,
                    b"message-style\x00" as *const u8 as *const libc::c_char);
        screen_write_start(&mut ctx as *mut screen_write_ctx,
                           0 as *mut window_pane,
                           &mut (*c).status.status as *mut screen);
        screen_write_cursormove(&mut ctx as *mut screen_write_ctx,
                                0i32 as u_int, 0i32 as u_int);
        offset = 0i32 as u_int;
        while offset < lines.wrapping_mul((*c).tty.sx) {
            screen_write_putc(&mut ctx as *mut screen_write_ctx,
                              &mut gc as *mut grid_cell, 32 as u_char);
            offset = offset.wrapping_add(1)
        }
        screen_write_cursormove(&mut ctx as *mut screen_write_ctx,
                                0i32 as u_int,
                                lines.wrapping_sub(1i32 as libc::c_uint));
        screen_write_nputs(&mut ctx as *mut screen_write_ctx, len as ssize_t,
                           &mut gc as *mut grid_cell,
                           b"%s\x00" as *const u8 as *const libc::c_char,
                           (*c).message_string);
        screen_write_stop(&mut ctx as *mut screen_write_ctx);
        if grid_compare((*c).status.status.grid, old_status.grid) == 0i32 {
            screen_free(&mut old_status as *mut screen);
            return 0i32
        } else { screen_free(&mut old_status as *mut screen); return 1i32 }
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_prompt_set(mut c: *mut client,
                                           mut msg: *const libc::c_char,
                                           mut input: *const libc::c_char,
                                           mut inputcb: prompt_input_cb,
                                           mut freecb: prompt_free_cb,
                                           mut data: *mut libc::c_void,
                                           mut flags: libc::c_int) -> () {
    let mut ft: *mut format_tree = 0 as *mut format_tree;
    let mut t: time_t = 0;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut cp: *mut libc::c_char = 0 as *mut libc::c_char;
    ft = format_create(c, 0 as *mut cmdq_item, 0i32, 0i32);
    format_defaults(ft, c, 0 as *mut session, 0 as *mut winlink,
                    0 as *mut window_pane);
    t = time(0 as *mut time_t);
    if input == 0 as *mut libc::c_void as *const libc::c_char {
        input = b"\x00" as *const u8 as *const libc::c_char
    }
    if 0 != flags & 8i32 {
        tmp = xstrdup(input)
    } else { tmp = format_expand_time(ft, input, t) }
    status_message_clear(c);
    status_prompt_clear(c);
    if (*c).status.old_status == 0 as *mut libc::c_void as *mut screen {
        (*c).status.old_status =
            xmalloc(::std::mem::size_of::<screen>() as libc::c_ulong) as
                *mut screen;
        memcpy((*c).status.old_status as *mut libc::c_void,
               &mut (*c).status.status as *mut screen as *const libc::c_void,
               ::std::mem::size_of::<screen>() as libc::c_ulong);
        screen_init(&mut (*c).status.status as *mut screen, (*c).tty.sx,
                    1i32 as u_int, 0i32 as u_int);
    }
    (*c).prompt_string = format_expand_time(ft, msg, t);
    (*c).prompt_buffer = utf8_fromcstr(tmp);
    (*c).prompt_index = utf8_strlen((*c).prompt_buffer);
    (*c).prompt_inputcb = inputcb;
    (*c).prompt_freecb = freecb;
    (*c).prompt_data = data;
    (*c).prompt_hindex = 0i32 as u_int;
    (*c).prompt_flags = flags;
    (*c).prompt_mode = PROMPT_ENTRY;
    if 0 != !flags & 4i32 { (*c).tty.flags |= 1i32 | 2i32 }
    (*c).flags |= 16i32;
    if 0 != flags & 4i32 && *tmp as libc::c_int != 0 {
        xasprintf(&mut cp as *mut *mut libc::c_char,
                  b"=%s\x00" as *const u8 as *const libc::c_char, tmp);
        (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                (*c).prompt_data,
                                                                cp, 0i32);
        free(cp as *mut libc::c_void);
    }
    free(tmp as *mut libc::c_void);
    format_free(ft);
}
#[no_mangle]
pub unsafe extern "C" fn status_prompt_clear(mut c: *mut client) -> () {
    if (*c).prompt_string == 0 as *mut libc::c_void as *mut libc::c_char {
        return
    } else {
        if (*c).prompt_freecb !=
               ::std::mem::transmute::<*mut libc::c_void,
                                       prompt_free_cb>(0 as *mut libc::c_void)
               && (*c).prompt_data != 0 as *mut libc::c_void {
            (*c).prompt_freecb.expect("non-null function pointer")((*c).prompt_data);
        }
        free((*c).prompt_string as *mut libc::c_void);
        (*c).prompt_string = 0 as *mut libc::c_char;
        free((*c).prompt_buffer as *mut libc::c_void);
        (*c).prompt_buffer = 0 as *mut utf8_data;
        (*c).tty.flags &= !(1i32 | 2i32);
        (*c).flags |= 8i32;
        screen_reinit(&mut (*c).status.status as *mut screen);
        return;
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_prompt_redraw(mut c: *mut client)
 -> libc::c_int {
    let mut ctx: screen_write_ctx =
        screen_write_ctx{wp: 0 as *mut window_pane,
                         s: 0 as *mut screen,
                         item: 0 as *mut screen_write_collect_item,
                         list: 0 as *mut screen_write_collect_line,
                         scrolled: 0,
                         bg: 0,
                         cells: 0,
                         written: 0,
                         skipped: 0,};
    let mut s: *mut session = (*c).session;
    let mut old_status: screen =
        screen{title: 0 as *mut libc::c_char,
               titles: 0 as *mut screen_titles,
               grid: 0 as *mut grid,
               cx: 0,
               cy: 0,
               cstyle: 0,
               ccolour: 0 as *mut libc::c_char,
               rupper: 0,
               rlower: 0,
               mode: 0,
               tabs: 0 as *mut bitstr_t,
               sel:
                   screen_sel{flag: 0,
                              hidden: 0,
                              rectflag: 0,
                              lineflag: LINE_SEL_NONE,
                              modekeys: 0,
                              sx: 0,
                              sy: 0,
                              ex: 0,
                              ey: 0,
                              cell:
                                  grid_cell{flags: 0,
                                            attr: 0,
                                            fg: 0,
                                            bg: 0,
                                            data:
                                                utf8_data{data: [0; 9],
                                                          have: 0,
                                                          size: 0,
                                                          width: 0,},},},};
    let mut i: u_int = 0;
    let mut offset: u_int = 0;
    let mut left: u_int = 0;
    let mut start: u_int = 0;
    let mut pcursor: u_int = 0;
    let mut pwidth: u_int = 0;
    let mut width: u_int = 0;
    let mut lines: u_int = 0;
    let mut gc: grid_cell =
        grid_cell{flags: 0,
                  attr: 0,
                  fg: 0,
                  bg: 0,
                  data:
                      utf8_data{data: [0; 9], have: 0, size: 0, width: 0,},};
    let mut cursorgc: grid_cell =
        grid_cell{flags: 0,
                  attr: 0,
                  fg: 0,
                  bg: 0,
                  data:
                      utf8_data{data: [0; 9], have: 0, size: 0, width: 0,},};
    if (*c).tty.sx == 0i32 as libc::c_uint ||
           (*c).tty.sy == 0i32 as libc::c_uint {
        return 0i32
    } else {
        memcpy(&mut old_status as *mut screen as *mut libc::c_void,
               &mut (*c).status.status as *mut screen as *const libc::c_void,
               ::std::mem::size_of::<screen>() as libc::c_ulong);
        lines = status_line_size((*c).session);
        if lines <= 1i32 as libc::c_uint {
            lines = 1i32 as u_int;
            screen_init(&mut (*c).status.status as *mut screen, (*c).tty.sx,
                        1i32 as u_int, 0i32 as u_int);
        } else {
            screen_init(&mut (*c).status.status as *mut screen, (*c).tty.sx,
                        lines, 0i32 as u_int);
        }
        if (*c).prompt_mode as libc::c_uint ==
               PROMPT_COMMAND as libc::c_int as libc::c_uint {
            style_apply(&mut gc as *mut grid_cell, (*s).options,
                        b"message-command-style\x00" as *const u8 as
                            *const libc::c_char);
        } else {
            style_apply(&mut gc as *mut grid_cell, (*s).options,
                        b"message-style\x00" as *const u8 as
                            *const libc::c_char);
        }
        memcpy(&mut cursorgc as *mut grid_cell as *mut libc::c_void,
               &mut gc as *mut grid_cell as *const libc::c_void,
               ::std::mem::size_of::<grid_cell>() as libc::c_ulong);
        cursorgc.attr = (cursorgc.attr as libc::c_int ^ 16i32) as u_short;
        start =
            screen_write_strlen(b"%s\x00" as *const u8 as *const libc::c_char,
                                (*c).prompt_string) as u_int;
        if start > (*c).tty.sx { start = (*c).tty.sx }
        screen_write_start(&mut ctx as *mut screen_write_ctx,
                           0 as *mut window_pane,
                           &mut (*c).status.status as *mut screen);
        screen_write_cursormove(&mut ctx as *mut screen_write_ctx,
                                0i32 as u_int, 0i32 as u_int);
        offset = 0i32 as u_int;
        while offset < lines.wrapping_mul((*c).tty.sx) {
            screen_write_putc(&mut ctx as *mut screen_write_ctx,
                              &mut gc as *mut grid_cell, 32 as u_char);
            offset = offset.wrapping_add(1)
        }
        screen_write_cursormove(&mut ctx as *mut screen_write_ctx,
                                0i32 as u_int, 0i32 as u_int);
        screen_write_nputs(&mut ctx as *mut screen_write_ctx,
                           start as ssize_t, &mut gc as *mut grid_cell,
                           b"%s\x00" as *const u8 as *const libc::c_char,
                           (*c).prompt_string);
        screen_write_cursormove(&mut ctx as *mut screen_write_ctx, start,
                                0i32 as u_int);
        left = (*c).tty.sx.wrapping_sub(start);
        if !(left == 0i32 as libc::c_uint) {
            pcursor =
                utf8_strwidth((*c).prompt_buffer,
                              (*c).prompt_index as ssize_t);
            pwidth =
                utf8_strwidth((*c).prompt_buffer,
                              1i32.wrapping_neg() as ssize_t);
            if pcursor >= left {
                offset =
                    pcursor.wrapping_sub(left).wrapping_add(1i32 as
                                                                libc::c_uint);
                pwidth = left
            } else { offset = 0i32 as u_int }
            if pwidth > left { pwidth = left }
            width = 0i32 as u_int;
            i = 0i32 as u_int;
            while (*(*c).prompt_buffer.offset(i as isize)).size as libc::c_int
                      != 0i32 {
                if width < offset {
                    width =
                        (width as
                             libc::c_uint).wrapping_add((*(*c).prompt_buffer.offset(i
                                                                                        as
                                                                                        isize)).width
                                                            as libc::c_uint)
                            as u_int as u_int
                } else {
                    if width >= offset.wrapping_add(pwidth) { break ; }
                    width =
                        (width as
                             libc::c_uint).wrapping_add((*(*c).prompt_buffer.offset(i
                                                                                        as
                                                                                        isize)).width
                                                            as libc::c_uint)
                            as u_int as u_int;
                    if width > offset.wrapping_add(pwidth) { break ; }
                    if i as libc::c_ulong != (*c).prompt_index {
                        utf8_copy(&mut gc.data as *mut utf8_data,
                                  &mut *(*c).prompt_buffer.offset(i as isize)
                                      as *mut utf8_data);
                        screen_write_cell(&mut ctx as *mut screen_write_ctx,
                                          &mut gc as *mut grid_cell);
                    } else {
                        utf8_copy(&mut cursorgc.data as *mut utf8_data,
                                  &mut *(*c).prompt_buffer.offset(i as isize)
                                      as *mut utf8_data);
                        screen_write_cell(&mut ctx as *mut screen_write_ctx,
                                          &mut cursorgc as *mut grid_cell);
                    }
                }
                i = i.wrapping_add(1)
            }
            if (*c).status.status.cx <
                   (*(*(&mut (*c).status.status as *mut screen)).grid).sx &&
                   (*c).prompt_index >= i as libc::c_ulong {
                screen_write_putc(&mut ctx as *mut screen_write_ctx,
                                  &mut cursorgc as *mut grid_cell,
                                  32 as u_char);
            }
        }
        screen_write_stop(&mut ctx as *mut screen_write_ctx);
        if grid_compare((*c).status.status.grid, old_status.grid) == 0i32 {
            screen_free(&mut old_status as *mut screen);
            return 0i32
        } else { screen_free(&mut old_status as *mut screen); return 1i32 }
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_prompt_key(mut c: *mut client,
                                           mut key: key_code) -> libc::c_int {
    let mut current_block: u64;
    let mut oo: *mut options = (*(*c).session).options;
    let mut pb: *mut paste_buffer = 0 as *mut paste_buffer;
    let mut s: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut cp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut word: [libc::c_char; 64] = [0; 64];
    let mut prefix: libc::c_char = 61 as libc::c_char;
    let mut histstr: *const libc::c_char = 0 as *const libc::c_char;
    let mut bufdata: *const libc::c_char = 0 as *const libc::c_char;
    let mut ws: *const libc::c_char = 0 as *const libc::c_char;
    let mut ch: u_char = 0;
    let mut size: size_t = 0;
    let mut n: size_t = 0;
    let mut off: size_t = 0;
    let mut idx: size_t = 0;
    let mut bufsize: size_t = 0;
    let mut used: size_t = 0;
    let mut tmp: utf8_data =
        utf8_data{data: [0; 9], have: 0, size: 0, width: 0,};
    let mut first: *mut utf8_data = 0 as *mut utf8_data;
    let mut last: *mut utf8_data = 0 as *mut utf8_data;
    let mut ud: *mut utf8_data = 0 as *mut utf8_data;
    let mut keys: libc::c_int = 0;
    size = utf8_strlen((*c).prompt_buffer);
    if 0 != (*c).prompt_flags & 2i32 {
        if key >= 48 as libc::c_ulonglong && key <= 57 as libc::c_ulonglong {
            current_block = 7578323824570608401;
        } else {
            s = utf8_tocstr((*c).prompt_buffer);
            (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                    (*c).prompt_data,
                                                                    s, 1i32);
            status_prompt_clear(c);
            free(s as *mut libc::c_void);
            return 1i32
        }
    } else {
        keys =
            options_get_number((*(*c).session).options,
                               b"status-keys\x00" as *const u8 as
                                   *const libc::c_char) as libc::c_int;
        if keys == 1i32 {
            match status_prompt_translate_key(c, key,
                                              &mut key as *mut key_code) {
                1 => { current_block = 12787296880002471115; }
                2 => { current_block = 7578323824570608401; }
                _ => { return 0i32 }
            }
        } else { current_block = 12787296880002471115; }
        match current_block {
            7578323824570608401 => { }
            _ => {
                match key {
                    268435547 | 2 => {
                        current_block = 2408508574073010388;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    268435548 | 6 => {
                        current_block = 12990826847085376303;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    268435540 | 1 => {
                        current_block = 11533739284268570803;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    268435541 | 5 => {
                        current_block = 8079264503378379386;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    9 => {
                        current_block = 17013359281981807571;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    268435525 | 8 => {
                        current_block = 10772690620998241756;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    268435539 | 4 => {
                        current_block = 5970358073848348575;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    21 => {
                        current_block = 16194126489807337798;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    11 => {
                        current_block = 1754583399387835727;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    23 => {
                        current_block = 3947153213232826515;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    35184372088934 => {
                        current_block = 5402613236608857871;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    35184372088930 => {
                        current_block = 11778947346494870700;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    268435545 | 16 => {
                        current_block = 1508494158227934944;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    268435546 | 14 => {
                        current_block = 13173292619665195676;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    25 => {
                        current_block = 15183034636899857221;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    20 => {
                        current_block = 3513661652909667213;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    13 | 10 => {
                        current_block = 10035012600013456863;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    27 | 3 | 7 => {
                        current_block = 15585325081172392795;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    18 => {
                        current_block = 743185670549602528;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    19 => {
                        current_block = 13988319713433383510;
                        match current_block {
                            3947153213232826515 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                idx = (*c).prompt_index;
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while idx != 0i32 as libc::c_ulong {
                                    idx = idx.wrapping_sub(1);
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    idx = idx.wrapping_add(1);
                                    break ;
                                }
                                memmove((*c).prompt_buffer.offset(idx as
                                                                      isize)
                                            as *mut libc::c_void,
                                        (*c).prompt_buffer.offset((*c).prompt_index
                                                                      as
                                                                      isize)
                                            as *const libc::c_void,
                                        size.wrapping_add(1i32 as
                                                              libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                              as
                                                                                                                              libc::c_ulong));
                                memset((*c).prompt_buffer.offset(size as
                                                                     isize).offset(-((*c).prompt_index.wrapping_sub(idx)
                                                                                         as
                                                                                         isize))
                                           as *mut libc::c_void, 0,
                                       (*c).prompt_index.wrapping_sub(idx).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                            as
                                                                                            libc::c_ulong));
                                (*c).prompt_index = idx;
                                current_block = 17454085545635601721;
                            }
                            13988319713433383510 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 43 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            743185670549602528 => {
                                if 0 != (*c).prompt_flags & 4i32 {
                                    prefix = 45 as libc::c_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            5970358073848348575 => {
                                if (*c).prompt_index != size {
                                    memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize)
                                                as *mut libc::c_void,
                                            (*c).prompt_buffer.offset((*c).prompt_index
                                                                          as
                                                                          isize).offset(1isize)
                                                as *const libc::c_void,
                                            size.wrapping_add(1i32 as
                                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                  as
                                                                                                                                  libc::c_ulong));
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            16194126489807337798 => {
                                (*(*c).prompt_buffer.offset(0isize)).size =
                                    0i32 as u_char;
                                (*c).prompt_index = 0i32 as size_t;
                                current_block = 17454085545635601721;
                            }
                            5402613236608857871 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index != size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    idx = (*c).prompt_index;
                                    if 0 !=
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                if options_get_number(oo,
                                                      b"status-keys\x00" as
                                                          *const u8 as
                                                          *const libc::c_char)
                                       == 1i32 as libc::c_longlong &&
                                       (*c).prompt_index !=
                                           0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 17454085545635601721;
                                }
                            }
                            1754583399387835727 => {
                                if (*c).prompt_index < size {
                                    (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                    as
                                                                    isize)).size
                                        = 0i32 as u_char;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            13173292619665195676 => {
                                histstr =
                                    status_prompt_down_history(&mut (*c).prompt_hindex
                                                                   as
                                                                   *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            17013359281981807571 => {
                                if (*(*c).prompt_buffer.offset(0isize)).size
                                       as libc::c_int == 0i32 {
                                    current_block = 11006700562992250127;
                                } else {
                                    idx = (*c).prompt_index;
                                    if idx != 0i32 as libc::c_ulong {
                                        idx = idx.wrapping_sub(1)
                                    }
                                    first =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while first > (*c).prompt_buffer &&
                                              0 == status_prompt_space(first)
                                          {
                                        first = first.offset(-1isize)
                                    }
                                    while (*first).size as libc::c_int != 0i32
                                              &&
                                              0 != status_prompt_space(first)
                                          {
                                        first = first.offset(1isize)
                                    }
                                    last =
                                        &mut *(*c).prompt_buffer.offset(idx as
                                                                            isize)
                                            as *mut utf8_data;
                                    while (*last).size as libc::c_int != 0i32
                                              &&
                                              0 == status_prompt_space(last) {
                                        last = last.offset(1isize)
                                    }
                                    while last > (*c).prompt_buffer &&
                                              0 != status_prompt_space(last) {
                                        last = last.offset(-1isize)
                                    }
                                    if (*last).size as libc::c_int != 0i32 {
                                        last = last.offset(1isize)
                                    }
                                    if last <= first {
                                        current_block = 11006700562992250127;
                                    } else {
                                        used = 0i32 as size_t;
                                        ud = first;
                                        while ud < last {
                                            if used.wrapping_add((*ud).size as
                                                                     libc::c_ulong)
                                                   >=
                                                   ::std::mem::size_of::<[libc::c_char; 64]>()
                                                       as libc::c_ulong {
                                                break ;
                                            }
                                            memcpy(word.as_mut_ptr().offset(used
                                                                                as
                                                                                isize)
                                                       as *mut libc::c_void,
                                                   (*ud).data.as_mut_ptr() as
                                                       *const libc::c_void,
                                                   (*ud).size as
                                                       libc::c_ulong);
                                            used =
                                                (used as
                                                     libc::c_ulong).wrapping_add((*ud).size
                                                                                     as
                                                                                     libc::c_ulong)
                                                    as size_t as size_t;
                                            ud = ud.offset(1isize)
                                        }
                                        if ud != last {
                                            current_block =
                                                11006700562992250127;
                                        } else {
                                            word[used as usize] =
                                                0 as libc::c_char;
                                            s =
                                                status_prompt_complete((*c).session,
                                                                       word.as_mut_ptr());
                                            if s ==
                                                   0 as *mut libc::c_void as
                                                       *mut libc::c_char {
                                                current_block =
                                                    11006700562992250127;
                                            } else {
                                                n =
                                                    size.wrapping_sub((*c).prompt_buffer.offset_to(last).expect("bad offset_to")
                                                                          as
                                                                          libc::c_long
                                                                          as
                                                                          libc::c_ulong).wrapping_add(1i32
                                                                                                          as
                                                                                                          libc::c_ulong);
                                                memmove(first as
                                                            *mut libc::c_void,
                                                        last as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_sub(first.offset_to(last).expect("bad offset_to")
                                                                                         as
                                                                                         libc::c_long
                                                                                         as
                                                                                         libc::c_ulong)
                                                        as size_t as size_t;
                                                size =
                                                    (size as
                                                         libc::c_ulong).wrapping_add(strlen(s))
                                                        as size_t as size_t;
                                                off =
                                                    (*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                        as libc::c_long as
                                                        size_t;
                                                (*c).prompt_buffer =
                                                    xreallocarray((*c).prompt_buffer
                                                                      as
                                                                      *mut libc::c_void,
                                                                  size.wrapping_add(1i32
                                                                                        as
                                                                                        libc::c_ulong),
                                                                  ::std::mem::size_of::<utf8_data>()
                                                                      as
                                                                      libc::c_ulong)
                                                        as *mut utf8_data;
                                                first =
                                                    (*c).prompt_buffer.offset(off
                                                                                  as
                                                                                  isize);
                                                memmove(first.offset(strlen(s)
                                                                         as
                                                                         isize)
                                                            as
                                                            *mut libc::c_void,
                                                        first as
                                                            *const libc::c_void,
                                                        n.wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                           as
                                                                           libc::c_ulong));
                                                idx = 0i32 as size_t;
                                                while idx < strlen(s) {
                                                    utf8_set(&mut *first.offset(idx
                                                                                    as
                                                                                    isize)
                                                                 as
                                                                 *mut utf8_data,
                                                             *s.offset(idx as
                                                                           isize)
                                                                 as u_char);
                                                    idx = idx.wrapping_add(1)
                                                }
                                                (*c).prompt_index =
                                                    ((*c).prompt_buffer.offset_to(first).expect("bad offset_to")
                                                         as libc::c_long as
                                                         libc::c_ulong).wrapping_add(strlen(s));
                                                free(s as *mut libc::c_void);
                                                current_block =
                                                    17454085545635601721;
                                            }
                                        }
                                    }
                                }
                            }
                            15183034636899857221 => {
                                pb =
                                    paste_get_top(0 as
                                                      *mut *const libc::c_char);
                                if pb ==
                                       0 as *mut libc::c_void as
                                           *mut paste_buffer {
                                    current_block = 11006700562992250127;
                                } else {
                                    bufdata =
                                        paste_buffer_data(pb,
                                                          &mut bufsize as
                                                              *mut size_t);
                                    n = 0i32 as size_t;
                                    while n < bufsize {
                                        ch =
                                            *bufdata.offset(n as isize) as
                                                u_char;
                                        if (ch as libc::c_int) < 32i32 ||
                                               ch as libc::c_int >= 127i32 {
                                            break ;
                                        }
                                        n = n.wrapping_add(1)
                                    }
                                    (*c).prompt_buffer =
                                        xreallocarray((*c).prompt_buffer as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(n).wrapping_add(1i32
                                                                                            as
                                                                                            libc::c_ulong),
                                                      ::std::mem::size_of::<utf8_data>()
                                                          as libc::c_ulong) as
                                            *mut utf8_data;
                                    if (*c).prompt_index == size {
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t;
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(n
                                                                                                as
                                                                                                isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        idx = 0i32 as size_t;
                                        while idx < n {
                                            ud =
                                                &mut *(*c).prompt_buffer.offset((*c).prompt_index.wrapping_add(idx)
                                                                                    as
                                                                                    isize)
                                                    as *mut utf8_data;
                                            utf8_set(ud,
                                                     *bufdata.offset(idx as
                                                                         isize)
                                                         as u_char);
                                            idx = idx.wrapping_add(1)
                                        }
                                        (*c).prompt_index =
                                            ((*c).prompt_index as
                                                 libc::c_ulong).wrapping_add(n)
                                                as size_t as size_t
                                    }
                                    current_block = 17454085545635601721;
                                }
                            }
                            10772690620998241756 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    if (*c).prompt_index == size {
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1);
                                        (*(*c).prompt_buffer.offset((*c).prompt_index
                                                                        as
                                                                        isize)).size
                                            = 0i32 as u_char
                                    } else {
                                        memmove((*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize).offset(-1isize)
                                                    as *mut libc::c_void,
                                                (*c).prompt_buffer.offset((*c).prompt_index
                                                                              as
                                                                              isize)
                                                    as *const libc::c_void,
                                                size.wrapping_add(1i32 as
                                                                      libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                                      as
                                                                                                                                      libc::c_ulong));
                                        (*c).prompt_index =
                                            (*c).prompt_index.wrapping_sub(1)
                                    }
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            12990826847085376303 => {
                                if (*c).prompt_index < size {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            2408508574073010388 => {
                                if (*c).prompt_index > 0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            10035012600013456863 => {
                                s = utf8_tocstr((*c).prompt_buffer);
                                if *s as libc::c_int != 0 {
                                    status_prompt_add_history(s);
                                }
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           s,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                }
                                free(s as *mut libc::c_void);
                                current_block = 11006700562992250127;
                            }
                            1508494158227934944 => {
                                histstr =
                                    status_prompt_up_history(&mut (*c).prompt_hindex
                                                                 as
                                                                 *mut u_int);
                                if histstr ==
                                       0 as *mut libc::c_void as
                                           *const libc::c_char {
                                    current_block = 11006700562992250127;
                                } else {
                                    free((*c).prompt_buffer as
                                             *mut libc::c_void);
                                    (*c).prompt_buffer =
                                        utf8_fromcstr(histstr);
                                    (*c).prompt_index =
                                        utf8_strlen((*c).prompt_buffer);
                                    current_block = 17454085545635601721;
                                }
                            }
                            11533739284268570803 => {
                                if (*c).prompt_index != 0i32 as libc::c_ulong
                                   {
                                    (*c).prompt_index = 0i32 as size_t;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            8079264503378379386 => {
                                if (*c).prompt_index != size {
                                    (*c).prompt_index = size;
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            3513661652909667213 => {
                                idx = (*c).prompt_index;
                                if idx < size { idx = idx.wrapping_add(1) }
                                if idx >= 2i32 as libc::c_ulong {
                                    utf8_copy(&mut tmp as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(2i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data);
                                    utf8_copy(&mut *(*c).prompt_buffer.offset(idx.wrapping_sub(1i32
                                                                                                   as
                                                                                                   libc::c_ulong)
                                                                                  as
                                                                                  isize)
                                                  as *mut utf8_data,
                                              &mut tmp as *mut utf8_data);
                                    (*c).prompt_index = idx;
                                    current_block = 17454085545635601721;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                            11778947346494870700 => {
                                ws =
                                    options_get_string(oo,
                                                       b"word-separators\x00"
                                                           as *const u8 as
                                                           *const libc::c_char);
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if 0 ==
                                           status_prompt_in_list(ws,
                                                                 &mut *(*c).prompt_buffer.offset(idx
                                                                                                     as
                                                                                                     isize)
                                                                     as
                                                                     *mut utf8_data)
                                       {
                                        break ;
                                    }
                                }
                                while (*c).prompt_index !=
                                          0i32 as libc::c_ulong {
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_sub(1);
                                    idx = (*c).prompt_index;
                                    if !(0 !=
                                             status_prompt_in_list(ws,
                                                                   &mut *(*c).prompt_buffer.offset(idx
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       *mut utf8_data))
                                       {
                                        continue ;
                                    }
                                    (*c).prompt_index =
                                        (*c).prompt_index.wrapping_add(1);
                                    break ;
                                }
                                current_block = 17454085545635601721;
                            }
                            _ => {
                                if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                           (*c).prompt_data,
                                                                                           0
                                                                                               as
                                                                                               *const libc::c_char,
                                                                                           1i32)
                                       == 0i32 {
                                    status_prompt_clear(c);
                                    current_block = 11006700562992250127;
                                } else {
                                    current_block = 11006700562992250127;
                                }
                            }
                        }
                        match current_block {
                            17454085545635601721 => { }
                            _ => { (*c).flags |= 16i32; return 0i32 }
                        }
                    }
                    _ => { current_block = 7578323824570608401; }
                }
            }
        }
    }
    match current_block {
        7578323824570608401 => {
            if key <= 31i32 as libc::c_ulonglong || key >= 268435456u64 {
                return 0i32
            } else if utf8_split(key as wchar_t, &mut tmp as *mut utf8_data)
                          as libc::c_uint !=
                          UTF8_DONE as libc::c_int as libc::c_uint {
                return 0i32
            } else {
                (*c).prompt_buffer =
                    xreallocarray((*c).prompt_buffer as *mut libc::c_void,
                                  size.wrapping_add(2i32 as libc::c_ulong),
                                  ::std::mem::size_of::<utf8_data>() as
                                      libc::c_ulong) as *mut utf8_data;
                if (*c).prompt_index == size {
                    utf8_copy(&mut *(*c).prompt_buffer.offset((*c).prompt_index
                                                                  as isize) as
                                  *mut utf8_data, &mut tmp as *mut utf8_data);
                    (*c).prompt_index = (*c).prompt_index.wrapping_add(1);
                    (*(*c).prompt_buffer.offset((*c).prompt_index as
                                                    isize)).size =
                        0i32 as u_char
                } else {
                    memmove((*c).prompt_buffer.offset((*c).prompt_index as
                                                          isize).offset(1isize)
                                as *mut libc::c_void,
                            (*c).prompt_buffer.offset((*c).prompt_index as
                                                          isize) as
                                *const libc::c_void,
                            size.wrapping_add(1i32 as
                                                  libc::c_ulong).wrapping_sub((*c).prompt_index).wrapping_mul(::std::mem::size_of::<utf8_data>()
                                                                                                                  as
                                                                                                                  libc::c_ulong));
                    utf8_copy(&mut *(*c).prompt_buffer.offset((*c).prompt_index
                                                                  as isize) as
                                  *mut utf8_data, &mut tmp as *mut utf8_data);
                    (*c).prompt_index = (*c).prompt_index.wrapping_add(1)
                }
                if 0 != (*c).prompt_flags & 1i32 {
                    s = utf8_tocstr((*c).prompt_buffer);
                    if strlen(s) != 1i32 as libc::c_ulong {
                        status_prompt_clear(c);
                    } else if (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                                      (*c).prompt_data,
                                                                                      s,
                                                                                      1i32)
                                  == 0i32 {
                        status_prompt_clear(c);
                    }
                    free(s as *mut libc::c_void);
                }
            }
        }
        _ => { }
    }
    (*c).flags |= 16i32;
    if 0 != (*c).prompt_flags & 4i32 {
        s = utf8_tocstr((*c).prompt_buffer);
        xasprintf(&mut cp as *mut *mut libc::c_char,
                  b"%c%s\x00" as *const u8 as *const libc::c_char,
                  prefix as libc::c_int, s);
        (*c).prompt_inputcb.expect("non-null function pointer")(c,
                                                                (*c).prompt_data,
                                                                cp, 0i32);
        free(cp as *mut libc::c_void);
        free(s as *mut libc::c_void);
    }
    return 0i32;
}
unsafe extern "C" fn status_prompt_add_history(mut line: *const libc::c_char)
 -> () {
    let mut size: size_t = 0;
    if status_prompt_hsize > 0i32 as libc::c_uint &&
           strcmp(*status_prompt_hlist.offset(status_prompt_hsize.wrapping_sub(1i32
                                                                                   as
                                                                                   libc::c_uint)
                                                  as isize), line) == 0i32 {
        return
    } else if status_prompt_hsize == 100i32 as libc::c_uint {
        free(*status_prompt_hlist.offset(0isize) as *mut libc::c_void);
        size =
            ((100i32 - 1i32) as
                 libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut libc::c_char>()
                                                 as libc::c_ulong);
        memmove(&mut *status_prompt_hlist.offset(0isize) as
                    *mut *mut libc::c_char as *mut libc::c_void,
                &mut *status_prompt_hlist.offset(1isize) as
                    *mut *mut libc::c_char as *const libc::c_void, size);
        let ref mut fresh1 =
            *status_prompt_hlist.offset(status_prompt_hsize.wrapping_sub(1i32
                                                                             as
                                                                             libc::c_uint)
                                            as isize);
        *fresh1 = xstrdup(line);
        return
    } else {
        status_prompt_hlist =
            xreallocarray(status_prompt_hlist as *mut libc::c_void,
                          status_prompt_hsize.wrapping_add(1i32 as
                                                               libc::c_uint)
                              as size_t,
                          ::std::mem::size_of::<*mut libc::c_char>() as
                              libc::c_ulong) as *mut *mut libc::c_char;
        let fresh2 = status_prompt_hsize;
        status_prompt_hsize = status_prompt_hsize.wrapping_add(1);
        let ref mut fresh3 = *status_prompt_hlist.offset(fresh2 as isize);
        *fresh3 = xstrdup(line);
        return;
    };
}
static mut status_prompt_hsize: u_int = unsafe { 0 };
static mut status_prompt_hlist: *mut *mut libc::c_char =
    unsafe { 0 as *const *mut libc::c_char as *mut *mut libc::c_char };
unsafe extern "C" fn status_prompt_down_history(mut idx: *mut u_int)
 -> *const libc::c_char {
    if status_prompt_hsize == 0i32 as libc::c_uint ||
           *idx == 0i32 as libc::c_uint {
        return b"\x00" as *const u8 as *const libc::c_char
    } else {
        *idx = (*idx).wrapping_sub(1);
        if *idx == 0i32 as libc::c_uint {
            return b"\x00" as *const u8 as *const libc::c_char
        } else {
            return *status_prompt_hlist.offset(status_prompt_hsize.wrapping_sub(*idx)
                                                   as isize)
        }
    };
}
unsafe extern "C" fn status_prompt_up_history(mut idx: *mut u_int)
 -> *const libc::c_char {
    if status_prompt_hsize == 0i32 as libc::c_uint ||
           *idx == status_prompt_hsize {
        return 0 as *const libc::c_char
    } else {
        *idx = (*idx).wrapping_add(1);
        return *status_prompt_hlist.offset(status_prompt_hsize.wrapping_sub(*idx)
                                               as isize)
    };
}
unsafe extern "C" fn status_prompt_in_list(mut ws: *const libc::c_char,
                                           mut ud: *const utf8_data)
 -> libc::c_int {
    if (*ud).size as libc::c_int != 1i32 || (*ud).width as libc::c_int != 1i32
       {
        return 0i32
    } else {
        return (strchr(ws, *(*ud).data.as_ptr() as libc::c_int) !=
                    0 as *mut libc::c_void as *mut libc::c_char) as
                   libc::c_int
    };
}
unsafe extern "C" fn status_prompt_complete(mut session: *mut session,
                                            mut s: *const libc::c_char)
 -> *mut libc::c_char {
    let mut list: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut colon: *const libc::c_char = 0 as *const libc::c_char;
    let mut size: u_int = 0i32 as u_int;
    let mut i: u_int = 0;
    let mut s_loop: *mut session = 0 as *mut session;
    let mut wl: *mut winlink = 0 as *mut winlink;
    let mut w: *mut window = 0 as *mut window;
    let mut copy: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut out: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    if *s as libc::c_int == 0 {
        return 0 as *mut libc::c_char
    } else {
        out = 0 as *mut libc::c_char;
        if strncmp(s, b"-t\x00" as *const u8 as *const libc::c_char,
                   2i32 as libc::c_ulong) != 0i32 &&
               strncmp(s, b"-s\x00" as *const u8 as *const libc::c_char,
                       2i32 as libc::c_ulong) != 0i32 {
            list = status_prompt_complete_list(&mut size as *mut u_int, s);
            if size == 0i32 as libc::c_uint {
                out = 0 as *mut libc::c_char
            } else if size == 1i32 as libc::c_uint {
                xasprintf(&mut out as *mut *mut libc::c_char,
                          b"%s \x00" as *const u8 as *const libc::c_char,
                          *list.offset(0isize));
            } else { out = status_prompt_complete_prefix(list, size) }
            free(list as *mut libc::c_void);
            return out
        } else {
            copy = xstrdup(s);
            colon = b":\x00" as *const u8 as *const libc::c_char;
            if *copy.offset(strlen(copy).wrapping_sub(1i32 as libc::c_ulong)
                                as isize) as libc::c_int == 58 {
                *copy.offset(strlen(copy).wrapping_sub(1i32 as libc::c_ulong)
                                 as isize) = 0 as libc::c_char
            } else { colon = b"\x00" as *const u8 as *const libc::c_char }
            s = copy.offset(2isize);
            s_loop =
                sessions_RB_MINMAX(&mut sessions as *mut sessions,
                                   1i32.wrapping_neg());
            while s_loop != 0 as *mut libc::c_void as *mut session {
                if strncmp((*s_loop).name, s, strlen(s)) == 0i32 {
                    list =
                        xreallocarray(list as *mut libc::c_void,
                                      size.wrapping_add(2i32 as libc::c_uint)
                                          as size_t,
                                      ::std::mem::size_of::<*const libc::c_char>()
                                          as libc::c_ulong) as
                            *mut *const libc::c_char;
                    let fresh4 = size;
                    size = size.wrapping_add(1);
                    let ref mut fresh5 = *list.offset(fresh4 as isize);
                    *fresh5 = (*s_loop).name
                }
                s_loop = sessions_RB_NEXT(s_loop)
            }
            if size == 1i32 as libc::c_uint {
                out = xstrdup(*list.offset(0isize));
                if session_find(*list.offset(0isize)) !=
                       0 as *mut libc::c_void as *mut session {
                    colon = b":\x00" as *const u8 as *const libc::c_char
                }
            } else if size != 0i32 as libc::c_uint {
                out = status_prompt_complete_prefix(list, size)
            }
            if out != 0 as *mut libc::c_void as *mut libc::c_char {
                xasprintf(&mut tmp as *mut *mut libc::c_char,
                          b"-%c%s%s\x00" as *const u8 as *const libc::c_char,
                          *copy.offset(1isize) as libc::c_int, out, colon);
                free(out as *mut libc::c_void);
                out = tmp
            } else {
                colon = b"\x00" as *const u8 as *const libc::c_char;
                if *s as libc::c_int == 58 {
                    wl =
                        winlinks_RB_MINMAX(&mut (*session).windows as
                                               *mut winlinks,
                                           1i32.wrapping_neg());
                    while wl != 0 as *mut libc::c_void as *mut winlink {
                        xasprintf(&mut tmp as *mut *mut libc::c_char,
                                  b":%s\x00" as *const u8 as
                                      *const libc::c_char,
                                  (*(*wl).window).name);
                        if strncmp(tmp, s, strlen(s)) == 0i32 {
                            list =
                                xreallocarray(list as *mut libc::c_void,
                                              size.wrapping_add(1i32 as
                                                                    libc::c_uint)
                                                  as size_t,
                                              ::std::mem::size_of::<*const libc::c_char>()
                                                  as libc::c_ulong) as
                                    *mut *const libc::c_char;
                            let fresh6 = size;
                            size = size.wrapping_add(1);
                            let ref mut fresh7 =
                                *list.offset(fresh6 as isize);
                            *fresh7 = tmp
                        } else {
                            free(tmp as *mut libc::c_void);
                            xasprintf(&mut tmp as *mut *mut libc::c_char,
                                      b":%d\x00" as *const u8 as
                                          *const libc::c_char, (*wl).idx);
                            if strncmp(tmp, s, strlen(s)) == 0i32 {
                                list =
                                    xreallocarray(list as *mut libc::c_void,
                                                  size.wrapping_add(1i32 as
                                                                        libc::c_uint)
                                                      as size_t,
                                                  ::std::mem::size_of::<*const libc::c_char>()
                                                      as libc::c_ulong) as
                                        *mut *const libc::c_char;
                                let fresh8 = size;
                                size = size.wrapping_add(1);
                                let ref mut fresh9 =
                                    *list.offset(fresh8 as isize);
                                *fresh9 = tmp
                            } else { free(tmp as *mut libc::c_void); }
                        }
                        wl = winlinks_RB_NEXT(wl)
                    }
                } else {
                    s_loop =
                        sessions_RB_MINMAX(&mut sessions as *mut sessions,
                                           1i32.wrapping_neg());
                    while s_loop != 0 as *mut libc::c_void as *mut session {
                        wl =
                            winlinks_RB_MINMAX(&mut (*s_loop).windows as
                                                   *mut winlinks,
                                               1i32.wrapping_neg());
                        while wl != 0 as *mut libc::c_void as *mut winlink {
                            w = (*wl).window;
                            xasprintf(&mut tmp as *mut *mut libc::c_char,
                                      b"%s:%s\x00" as *const u8 as
                                          *const libc::c_char, (*s_loop).name,
                                      (*w).name);
                            if strncmp(tmp, s, strlen(s)) == 0i32 {
                                list =
                                    xreallocarray(list as *mut libc::c_void,
                                                  size.wrapping_add(1i32 as
                                                                        libc::c_uint)
                                                      as size_t,
                                                  ::std::mem::size_of::<*const libc::c_char>()
                                                      as libc::c_ulong) as
                                        *mut *const libc::c_char;
                                let fresh10 = size;
                                size = size.wrapping_add(1);
                                let ref mut fresh11 =
                                    *list.offset(fresh10 as isize);
                                *fresh11 = tmp
                            } else {
                                free(tmp as *mut libc::c_void);
                                xasprintf(&mut tmp as *mut *mut libc::c_char,
                                          b"%s:%d\x00" as *const u8 as
                                              *const libc::c_char,
                                          (*s_loop).name, (*wl).idx);
                                if strncmp(tmp, s, strlen(s)) == 0i32 {
                                    list =
                                        xreallocarray(list as
                                                          *mut libc::c_void,
                                                      size.wrapping_add(1i32
                                                                            as
                                                                            libc::c_uint)
                                                          as size_t,
                                                      ::std::mem::size_of::<*const libc::c_char>()
                                                          as libc::c_ulong) as
                                            *mut *const libc::c_char;
                                    let fresh12 = size;
                                    size = size.wrapping_add(1);
                                    let ref mut fresh13 =
                                        *list.offset(fresh12 as isize);
                                    *fresh13 = tmp
                                } else { free(tmp as *mut libc::c_void); }
                            }
                            wl = winlinks_RB_NEXT(wl)
                        }
                        s_loop = sessions_RB_NEXT(s_loop)
                    }
                }
                if size == 1i32 as libc::c_uint {
                    out = xstrdup(*list.offset(0isize));
                    colon = b" \x00" as *const u8 as *const libc::c_char
                } else if size != 0i32 as libc::c_uint {
                    out = status_prompt_complete_prefix(list, size)
                }
                if out != 0 as *mut libc::c_void as *mut libc::c_char {
                    xasprintf(&mut tmp as *mut *mut libc::c_char,
                              b"-%c%s%s\x00" as *const u8 as
                                  *const libc::c_char,
                              *copy.offset(1isize) as libc::c_int, out,
                              colon);
                    out = tmp
                }
                i = 0i32 as u_int;
                while i < size {
                    free(*list.offset(i as isize) as *mut libc::c_void);
                    i = i.wrapping_add(1)
                }
            }
            free(copy as *mut libc::c_void);
            free(list as *mut libc::c_void);
            return out
        }
    };
}
unsafe extern "C" fn status_prompt_complete_prefix(mut list:
                                                       *mut *const libc::c_char,
                                                   mut size: u_int)
 -> *mut libc::c_char {
    let mut out: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut i: u_int = 0;
    let mut j: size_t = 0;
    out = xstrdup(*list.offset(0isize));
    i = 1i32 as u_int;
    while i < size {
        j = strlen(*list.offset(i as isize));
        if j > strlen(out) { j = strlen(out) }
        while j > 0i32 as libc::c_ulong {
            if *out.offset(j.wrapping_sub(1i32 as libc::c_ulong) as isize) as
                   libc::c_int !=
                   *(*list.offset(i as
                                      isize)).offset(j.wrapping_sub(1i32 as
                                                                        libc::c_ulong)
                                                         as isize) as
                       libc::c_int {
                *out.offset(j.wrapping_sub(1i32 as libc::c_ulong) as isize) =
                    0 as libc::c_char
            }
            j = j.wrapping_sub(1)
        }
        i = i.wrapping_add(1)
    }
    return out;
}
unsafe extern "C" fn status_prompt_complete_list(mut size: *mut u_int,
                                                 mut s: *const libc::c_char)
 -> *mut *const libc::c_char {
    let mut list: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut layout: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut cmdent: *mut *const cmd_entry = 0 as *mut *const cmd_entry;
    let mut oe: *const options_table_entry = 0 as *const options_table_entry;
    let mut layouts: [*const libc::c_char; 6] =
        [b"even-horizontal\x00" as *const u8 as *const libc::c_char,
         b"even-vertical\x00" as *const u8 as *const libc::c_char,
         b"main-horizontal\x00" as *const u8 as *const libc::c_char,
         b"main-vertical\x00" as *const u8 as *const libc::c_char,
         b"tiled\x00" as *const u8 as *const libc::c_char,
         0 as *const libc::c_char];
    *size = 0i32 as u_int;
    cmdent = cmd_table.as_mut_ptr();
    while *cmdent != 0 as *mut libc::c_void as *const cmd_entry {
        if strncmp((**cmdent).name, s, strlen(s)) == 0i32 {
            list =
                xreallocarray(list as *mut libc::c_void,
                              (*size).wrapping_add(1i32 as libc::c_uint) as
                                  size_t,
                              ::std::mem::size_of::<*const libc::c_char>() as
                                  libc::c_ulong) as *mut *const libc::c_char;
            let fresh14 = *size;
            *size = (*size).wrapping_add(1);
            let ref mut fresh15 = *list.offset(fresh14 as isize);
            *fresh15 = (**cmdent).name
        }
        cmdent = cmdent.offset(1isize)
    }
    oe = options_table.as_ptr();
    while (*oe).name != 0 as *mut libc::c_void as *const libc::c_char {
        if strncmp((*oe).name, s, strlen(s)) == 0i32 {
            list =
                xreallocarray(list as *mut libc::c_void,
                              (*size).wrapping_add(1i32 as libc::c_uint) as
                                  size_t,
                              ::std::mem::size_of::<*const libc::c_char>() as
                                  libc::c_ulong) as *mut *const libc::c_char;
            let fresh16 = *size;
            *size = (*size).wrapping_add(1);
            let ref mut fresh17 = *list.offset(fresh16 as isize);
            *fresh17 = (*oe).name
        }
        oe = oe.offset(1isize)
    }
    layout = layouts.as_mut_ptr();
    while *layout != 0 as *mut libc::c_void as *const libc::c_char {
        if strncmp(*layout, s, strlen(s)) == 0i32 {
            list =
                xreallocarray(list as *mut libc::c_void,
                              (*size).wrapping_add(1i32 as libc::c_uint) as
                                  size_t,
                              ::std::mem::size_of::<*const libc::c_char>() as
                                  libc::c_ulong) as *mut *const libc::c_char;
            let fresh18 = *size;
            *size = (*size).wrapping_add(1);
            let ref mut fresh19 = *list.offset(fresh18 as isize);
            *fresh19 = *layout
        }
        layout = layout.offset(1isize)
    }
    return list;
}
unsafe extern "C" fn status_prompt_space(mut ud: *const utf8_data)
 -> libc::c_int {
    if (*ud).size as libc::c_int != 1i32 || (*ud).width as libc::c_int != 1i32
       {
        return 0i32
    } else {
        return (*(*ud).data.as_ptr() as libc::c_int == 32) as libc::c_int
    };
}
unsafe extern "C" fn status_prompt_translate_key(mut c: *mut client,
                                                 mut key: key_code,
                                                 mut new_key: *mut key_code)
 -> libc::c_int {
    if (*c).prompt_mode as libc::c_uint ==
           PROMPT_ENTRY as libc::c_int as libc::c_uint {
        match key {
            3 | 8 | 9 | 21 | 23 | 10 | 13 | 268435525 | 268435539 | 268435546
            | 268435541 | 268435540 | 268435547 | 268435548 | 268435545 => {
                *new_key = key;
                return 1i32
            }
            27 => {
                (*c).prompt_mode = PROMPT_COMMAND;
                (*c).flags |= 16i32;
                return 0i32
            }
            _ => { *new_key = key; return 2i32 }
        }
    } else {
        match key {
            65 | 73 | 67 | 115 | 97 => {
                (*c).prompt_mode = PROMPT_ENTRY;
                (*c).flags |= 16i32
            }
            83 => {
                (*c).prompt_mode = PROMPT_ENTRY;
                (*c).flags |= 16i32;
                *new_key = 21 as key_code;
                return 1i32
            }
            105 | 27 => {
                (*c).prompt_mode = PROMPT_ENTRY;
                (*c).flags |= 16i32;
                return 0i32
            }
            _ => { }
        }
        match key {
            65 | 36 => {
                *new_key = KEYC_END as libc::c_int as key_code;
                return 1i32
            }
            73 | 48 | 94 => {
                *new_key = KEYC_HOME as libc::c_int as key_code;
                return 1i32
            }
            67 | 68 => { *new_key = 11 as key_code; return 1i32 }
            268435525 | 88 => {
                *new_key = KEYC_BSPACE as libc::c_int as key_code;
                return 1i32
            }
            98 | 66 => {
                *new_key = 98 as libc::c_ulonglong | 35184372088832u64;
                return 1i32
            }
            100 => { *new_key = 21 as key_code; return 1i32 }
            101 | 69 | 119 | 87 => {
                *new_key = 102 as libc::c_ulonglong | 35184372088832u64;
                return 1i32
            }
            112 => { *new_key = 25 as key_code; return 1i32 }
            115 | 268435539 | 120 => {
                *new_key = KEYC_DC as libc::c_int as key_code;
                return 1i32
            }
            268435546 | 106 => {
                *new_key = KEYC_DOWN as libc::c_int as key_code;
                return 1i32
            }
            268435547 | 104 => {
                *new_key = KEYC_LEFT as libc::c_int as key_code;
                return 1i32
            }
            97 | 268435548 | 108 => {
                *new_key = KEYC_RIGHT as libc::c_int as key_code;
                return 1i32
            }
            268435545 | 107 => {
                *new_key = KEYC_UP as libc::c_int as key_code;
                return 1i32
            }
            8 | 3 | 10 | 13 => { return 1i32 }
            _ => { return 0i32 }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_prompt_update(mut c: *mut client,
                                              mut msg: *const libc::c_char,
                                              mut input: *const libc::c_char)
 -> () {
    let mut ft: *mut format_tree = 0 as *mut format_tree;
    let mut t: time_t = 0;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    ft = format_create(c, 0 as *mut cmdq_item, 0i32, 0i32);
    format_defaults(ft, c, 0 as *mut session, 0 as *mut winlink,
                    0 as *mut window_pane);
    t = time(0 as *mut time_t);
    tmp = format_expand_time(ft, input, t);
    free((*c).prompt_string as *mut libc::c_void);
    (*c).prompt_string = format_expand_time(ft, msg, t);
    free((*c).prompt_buffer as *mut libc::c_void);
    (*c).prompt_buffer = utf8_fromcstr(tmp);
    (*c).prompt_index = utf8_strlen((*c).prompt_buffer);
    (*c).prompt_hindex = 0i32 as u_int;
    (*c).flags |= 16i32;
    free(tmp as *mut libc::c_void);
    format_free(ft);
}
#[no_mangle]
pub unsafe extern "C" fn status_prompt_load_history() -> () {
    let mut f: *mut FILE = 0 as *mut FILE;
    let mut history_file: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut line: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut length: size_t = 0;
    history_file = status_prompt_find_history_file();
    if history_file == 0 as *mut libc::c_void as *mut libc::c_char {
        return
    } else {
        log_debug(b"loading history from %s\x00" as *const u8 as
                      *const libc::c_char, history_file);
        f = fopen(history_file, b"r\x00" as *const u8 as *const libc::c_char);
        if f == 0 as *mut libc::c_void as *mut FILE {
            log_debug(b"%s: %s\x00" as *const u8 as *const libc::c_char,
                      history_file, strerror(*__errno_location()));
            free(history_file as *mut libc::c_void);
            return
        } else {
            free(history_file as *mut libc::c_void);
            loop  {
                line = fgetln(f, &mut length as *mut size_t);
                if line == 0 as *mut libc::c_void as *mut libc::c_char {
                    break ;
                }
                if !(length > 0i32 as libc::c_ulong) { continue ; }
                if *line.offset(length.wrapping_sub(1i32 as libc::c_ulong) as
                                    isize) as libc::c_int == 10 {
                    *line.offset(length.wrapping_sub(1i32 as libc::c_ulong) as
                                     isize) = 0 as libc::c_char;
                    status_prompt_add_history(line);
                } else {
                    tmp =
                        xmalloc(length.wrapping_add(1i32 as libc::c_ulong)) as
                            *mut libc::c_char;
                    memcpy(tmp as *mut libc::c_void,
                           line as *const libc::c_void, length);
                    *tmp.offset(length as isize) = 0 as libc::c_char;
                    status_prompt_add_history(tmp);
                    free(tmp as *mut libc::c_void);
                }
            }
            fclose(f);
            return;
        }
    };
}
unsafe extern "C" fn status_prompt_find_history_file() -> *mut libc::c_char {
    let mut home: *const libc::c_char = 0 as *const libc::c_char;
    let mut history_file: *const libc::c_char = 0 as *const libc::c_char;
    let mut path: *mut libc::c_char = 0 as *mut libc::c_char;
    history_file =
        options_get_string(global_options,
                           b"history-file\x00" as *const u8 as
                               *const libc::c_char);
    if *history_file as libc::c_int == 0 {
        return 0 as *mut libc::c_char
    } else if *history_file as libc::c_int == 47 {
        return xstrdup(history_file)
    } else if *history_file.offset(0isize) as libc::c_int != 126 ||
                  *history_file.offset(1isize) as libc::c_int != 47 {
        return 0 as *mut libc::c_char
    } else {
        home = find_home();
        if home == 0 as *mut libc::c_void as *const libc::c_char {
            return 0 as *mut libc::c_char
        } else {
            xasprintf(&mut path as *mut *mut libc::c_char,
                      b"%s%s\x00" as *const u8 as *const libc::c_char, home,
                      history_file.offset(1isize));
            return path
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn status_prompt_save_history() -> () {
    let mut f: *mut FILE = 0 as *mut FILE;
    let mut i: u_int = 0;
    let mut history_file: *mut libc::c_char = 0 as *mut libc::c_char;
    history_file = status_prompt_find_history_file();
    if history_file == 0 as *mut libc::c_void as *mut libc::c_char {
        return
    } else {
        log_debug(b"saving history to %s\x00" as *const u8 as
                      *const libc::c_char, history_file);
        f = fopen(history_file, b"w\x00" as *const u8 as *const libc::c_char);
        if f == 0 as *mut libc::c_void as *mut FILE {
            log_debug(b"%s: %s\x00" as *const u8 as *const libc::c_char,
                      history_file, strerror(*__errno_location()));
            free(history_file as *mut libc::c_void);
            return
        } else {
            free(history_file as *mut libc::c_void);
            i = 0i32 as u_int;
            while i < status_prompt_hsize {
                fputs(*status_prompt_hlist.offset(i as isize), f);
                fputc(10, f);
                i = i.wrapping_add(1)
            }
            fclose(f);
            return;
        }
    };
}
unsafe extern "C" fn status_message_callback(mut fd: libc::c_int,
                                             mut event: libc::c_short,
                                             mut data: *mut libc::c_void)
 -> () {
    let mut c: *mut client = data as *mut client;
    status_message_clear(c);
}

